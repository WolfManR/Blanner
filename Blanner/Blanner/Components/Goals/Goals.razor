
@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
@rendermode InteractiveServer

<h3>Goals</h3>

<div>
	<EditForm FormName="GoalCreation" Model="NewGoal" OnValidSubmit="CreateGoal">
		<div class="input-group mb-3">
			<label class="input-group-text">Name</label>
			<InputText class="form-control" @bind-Value="NewGoal.Name" aria-describedby="goalCreateBtn" />
			<button class="btn btn-primary" id="goalCreateBtn">Create</button>
		</div>
	</EditForm>
</div>

<div class="grid" tabindex="-1">
	<EditForm FormName="GoalsFilterForm" Model="FilterForm" Enhance>
		<label for="chbInsertActive">Insert Active</label>
		<InputCheckbox @bind-Value="FilterForm.IncludeActive" id="chbInsertActive" />
	</EditForm>

	<table class="table align-middle">
		<thead>
			<tr>
				<th scope="col">Name</th>
				<th scope="col"></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var (key, value) in _goalsGroups) {
				@if (value.Count > 0) {
					Contractor? keyValue = key;

					<tr class="item-header">
						<td class="fw-bold">@(keyValue?.Name ?? "Others")</td>
						<td class="d-flex justify-content-end">
							<button class="btn btn-danger" @onclick="() => DeleteContractorGroup(key)" disabled><i class="bi bi-trash3"></i></button>
						</td>
					</tr>

					@foreach (var item in value) {
						<tr class="item" @onclick="() => SelectGoal(item)">
							<td>@item.Name</td>
							<td class="d-flex justify-content-between align-bottom">
								<div class="btn-group">
									<button class="btn btn-secondary" @onclick="() => PushToActive(item)" @onclick:stopPropagation="true"><i class="bi bi-activity"></i></button>
									<button class="btn btn-success" @onclick="() => ActivateGoal(item)" @onclick:stopPropagation="true"><i class="bi bi-play-fill"></i></button>
								</div>
								<button class="btn btn-danger" @onclick="() => DeleteGoal(key, item)" @onclick:stopPropagation="true"><i class="bi bi-trash3"></i></button>
							</td>
						</tr>
					}
				}
			}
		</tbody>
	</table>
</div>

@code {
	private HubConnection? _hubConnection;

	private string _userId = "";
	private List<GoalVM> _goals = new();
	private Dictionary<Value<Contractor, int>, List<GoalVM>> _goalsGroups = new();

	[SupplyParameterFromForm]
	private GoalsFilterForm FilterForm { get; set; } = new();

	[SupplyParameterFromForm]
	private NameFormModel NewGoal { get; set; } = new();

	[Parameter]
	public EventCallback<int> OnSelected { get; set; }

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";

		await LoadGoals();

		_hubConnection = new HubConnectionBuilder().WithUrl(NavManager.GoalsHubUri()).Build();

		_hubConnection.On<int, string, ActiveGoalHeaderData>(nameof(IGoalsHub.ActiveGoalHeaderEdited), OnActiveGoalHeaderEdited);
		_hubConnection.On<int, string, GoalHeaderData>(nameof(IGoalsHub.GoalHeaderEdited), OnGoalHeaderEdited);
		_hubConnection.On<int, int, string, ActiveGoalData>(nameof(IGoalsHub.GoalActivated), OnGoalActivated);
		_hubConnection.On<int, string, GoalData>(nameof(IGoalsHub.GoalCreated), OnGoalCreated);
		_hubConnection.On<int, string>(nameof(IGoalsHub.GoalDeleted), OnGoalDeleted);
		_hubConnection.On<int, string>(nameof(IGoalsHub.ActiveGoalDeleted), OnActiveGoalDeleted);
		_hubConnection.On<string>(nameof(IGoalsHub.JobsBuilded), OnJobsBuilded);

		await _hubConnection.StartAsync();
	}

	private async Task LoadGoals() {
		var url = NavManager.GetUriWithQueryParameters(NavManager.ToAbsoluteUri("api/goals").AbsoluteUri, new Dictionary<string, object?> {
				{ "userId",  _userId },
				{ "includeActive", FilterForm.IncludeActive },
			});

		var response = await Http.GetFromJsonAsync<List<GoalData>>(url);
		SetGoalsQuery(response);
	}

	private void SetGoalsQuery(List<GoalData>? data) {
		if (data is null) {
			_goals.Clear();
			_goalsGroups.Clear();
			return;
		}
		_goals = data.Select(x=> new GoalVM(x)).ToList();
		var groups = _goals.GroupBy(x => x.Contractor, x => x);
		_goalsGroups = groups.ToDictionary(x => new Value<Contractor, int>(x.Key), x => x.ToList());
	}

	private async Task CreateGoal(EditContext editContext) {
		if (_userId.NullOrEmpty()) return;
		GoalCreationData request = new(NewGoal.Name, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/save").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task SelectGoal(GoalVM item) {
		if (OnSelected.HasDelegate) await OnSelected.InvokeAsync(item.Id);
	}

	private Task DeleteContractorGroup(Value<Contractor, int> groupKey) {
		// if (_goalsGroups.Remove(groupKey, out var list)) {
		// 	_goals.RemoveAll(x => list.Contains(x));
		// }
		return Task.CompletedTask;
	}

	private async Task ActivateGoal(GoalVM item) {
		TimerActivationData request = new(item.Id, item.ActiveGoalId, DateTimeOffset.Now, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/start").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task DeleteGoal(Value<Contractor, int> groupKey, GoalVM item) {
		GoalDeleteData request = new(item.Id, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/delete").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task PushToActive(GoalVM item) {
		GoalPushToActiveData request = new(item.Id, _userId, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/goals/activate").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}


	private async Task OnActiveGoalHeaderEdited(int goalId, string userId, ActiveGoalHeaderData data) {
		if (_userId != userId) return;
		GoalVM? goal = _goals.Find(x => x.ActiveGoalId == goalId);
		if (goal is null) return;

		goal.Set(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalHeaderEdited(int goalId, string userId, GoalHeaderData data) {
		if (_userId != userId) return;
		GoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.Set(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalActivated(int goalId, int activeGoalId, string userId, ActiveGoalData data) {
		if (_userId != userId || !FilterForm.IncludeActive) return;
		GoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;
		goal.SetActiveData(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalCreated(int goalId, string userId, GoalData data) {
		if (_userId != userId) return;
		GoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is not null) return;
		goal = new(data);
		_goals.Insert(0, goal);
		Value<Contractor, int> contractor = new(data.Contractor);
		List<GoalVM>? goals;
		if (!_goalsGroups.TryGetValue(contractor, out goals)) {
			_goalsGroups.Add(contractor, goals ??= new());
		}
		goals.Insert(0, goal);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalDeleted(int goalId, string userId) {
		if (_userId != userId) return;
		GoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		_goals.Remove(goal);
		Value<Contractor, int> contractor = new(goal.Contractor);
		if (_goalsGroups.TryGetValue(contractor, out var goals)) {
			goals.Remove(goal);
			if (goals.Count == 0) _goalsGroups.Remove(contractor);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalDeleted(int goalId, string userId) {
		if (_userId != userId) return;
		GoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.ActiveGoalId = null;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnJobsBuilded(string userId) {
		if (_userId != userId) return;

		await LoadGoals();

		await InvokeAsync(StateHasChanged);
	}

	class GoalsFilterForm {
		public bool IncludeActive { get; set; }
	}

	class GoalVM() {
		public int Id { get; private set; }
		public string Name { get; set; } = string.Empty;
		public Contractor? Contractor { get; set; }
		public int? ActiveGoalId { get; set; }
		// ToDo

		public bool IsOnEdit { get; set; }

		public GoalVM(GoalData data) : this() {
			Id = data.Id;
			Name = data.Name;
			Contractor = data.Contractor;
			ActiveGoalId = data.ActiveGoalId;
		}

		public void Set(ActiveGoalHeaderData data) {
			Name = data.Name;
			Contractor = data.Contractor;
		}
		public void Set(GoalHeaderData data) {
			Name = data.Name;
			Contractor = data.Contractor;
		}

		public void SetActiveData(ActiveGoalData data) {
			ActiveGoalId = data.Id;
		}
	}
}
