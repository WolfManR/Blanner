@page "/goals-dashboard"
@using Blanner.Components.Models

@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject IDialogService DialogService

@attribute [Authorize]
@rendermode InteractiveServerNotPrerendered

<PageTitle>Goals</PageTitle>
<FluentButton OnClick="OpenGoalsDialog">Open Dialog</FluentButton>
<div class="area" style="height: calc(100vh - 80px)">
    
    <div class="area-active">
        <ActiveGoals OnSelected="ShowActiveGoalDetails" />
    </div>
   @*  <div class="area-goals">
        <Goals OnSelected="ShowGoalDetails" />
    </div> *@
    <div class="area-selected px-4 py-4" style="height: calc(100%);">
        @if (!GoalEditFormModel.IsEmpty) {
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="SaveGoalChanges"><i class="bi bi-floppy"></i></button>
                <button class="btn btn-secondary" @onclick="ClearGoalForm"><i class="bi bi-x-circle"></i></button>
            </div>

            <EditForm FormName="GoalEditForm" Model="GoalEditFormModel" class="d-flex flex-column gap-2 mt-3">
                <div class="input-group mb-3">
                    <label class="input-group-text" for="goalContractorInput">Contractor</label>
                    <InputSelect class="form-select" @bind-Value="GoalEditFormModel.Contractor" id="goalContractorInput" DisplayName="Contractor">
                        <option value="0">Empty</option>
                        @foreach (var item in Contractors) {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="input-group mb-3">
                    <label class="input-group-text">Name</label>
                    <InputText class="form-control" @bind-Value="GoalEditFormModel.Name" DisplayName="Name" />
                </div>
            </EditForm>
        }
        @if (!ActiveGoalEditFormModel.IsEmpty) {
            <div class="d-flex align-items-center justify-content-between">
                <div class="btn-group">
                    <button class="btn btn-primary" @onclick="SaveActiveGoalChanges"><i class="bi bi-floppy"></i></button>
                    <button class="btn btn-secondary" @onclick="ClearActiveGoalForm"><i class="bi bi-x-circle"></i></button>
                </div>

                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="timesSwitcher" @bind-value="_showTimes" />
                    <label class="form-check-label" for="timesSwitcher">Times</label>
                </div>
            </div>

            <EditForm FormName="ActiveGoalEditForm" Model="ActiveGoalEditFormModel" class="d-flex flex-column gap-2 mt-3">
                <div class="input-group mb-3">
                    <label class="input-group-text">Contractor</label>

                    <InputSelect class="form-select" @bind-Value="ActiveGoalEditFormModel.Contractor" DisplayName="Contractor">
                        <option value="0">Empty</option>
                        @foreach (var item in Contractors) {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="input-group mb-3">
                    <label class="input-group-text">Name</label>
                    <InputText class="form-control" @bind-Value="ActiveGoalEditFormModel.Name" DisplayName="Name" />
                </div>

                <InputTextArea class="form-control" @bind-Value="ActiveGoalEditFormModel.Comment" style="height:40vh;" DisplayName="Comment" />
            </EditForm>

            @if (_showTimes) {
                <div class="mt-2 mb-1">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>From</th>
                                <th>To</th>
                                <th>Time</th>
                                <th>
                                    <div>
                                        <button class="btn-lg" @onclick="AddTimeActiveGoal"><i class="bi bi-plus-square-fill"></i></button>
                                    </div>
                                </th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in ActiveGoalEditFormModel.GoalTime) {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Start.ToString("t")</td>
                                    <td>@item.End.ToString("t")</td>
                                    <td>@item.Time.ToString(UserSettings.DetailedTimeFormatterValue())</td>
                                    <td>
                                        @if (item.Id != ActiveGoalEditFormModel.ActiveTimerId) {
                                            <div>
                                                <button class="btn btn-danger" @onclick="() => DeleteTime(item)"><i class="bi bi-trash3"></i></button>
                                                <button class="btn btn-info" @onclick="() => EditTimeActiveGoal(item)"><i class="bi bi-pencil-square"></i></button>
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <TimeRangeEditDialog @ref="_dialogRef" DialogCompletion="DialogClosed" />
        }
    </div>
</div>

@code {
    private HubConnection? _hubConnection;

    private TimeRangeEditDialog? _dialogRef;
    private Func<TimeRange?, ValueTask>? _dialogCompletion;

    private string _userId = "";
    private bool _showTimes;
    private GoalEditForm GoalEditFormModel { get; set; } = GoalEditForm.Create();
    private ActiveGoalEditForm ActiveGoalEditFormModel { get; set; } = ActiveGoalEditForm.Create();
    private ActiveGoalTimeEditForm ActiveGoalTimeEditFormModel { get; set; } = ActiveGoalTimeEditForm.Create();

    private List<Contractor> Contractors { get; set; } = new();
    private UserSettings? UserSettings { get; set; }

    protected override async Task OnInitializedAsync() {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userId = UserManager.GetUserId(state.User) ?? "";

        var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
        var response = await Http.GetFromJsonAsync<List<Contractor>>(uri);
        Contractors = response ?? new();

        _hubConnection = new HubConnectionBuilder().WithUrl(NavManager.GoalsHubUri()).Build();

        _hubConnection.On<int, string, GoalHeaderData>(nameof(IGoalsHub.GoalHeaderEdited), OnGoalHeaderEdited);
        _hubConnection.On<int, string>(nameof(IGoalsHub.GoalDeleted), OnGoalDeleted);

        _hubConnection.On<int, int, string, ActiveGoalData>(nameof(IGoalsHub.GoalActivated), OnGoalActivated);

        _hubConnection.On<int, string, ActiveGoalHeaderData>(nameof(IGoalsHub.ActiveGoalHeaderEdited), OnActiveGoalHeaderEdited);
        _hubConnection.On<int, string, TimeSpan>(nameof(IGoalsHub.TimerStopped), OnActiveGoalTimerStopped);
        _hubConnection.On<int, string>(nameof(IGoalsHub.ActiveGoalDeleted), OnActiveGoalDeleted);

        _hubConnection.On<int, string, ActiveGoalTimeData, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerCreated), OnActiveGoalTimerCreated);
        _hubConnection.On<int, string, ActiveGoalTimeData, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerEdited), OnActiveGoalTimerEdited);
        _hubConnection.On<int, int, string, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerDeleted), OnActiveGoalTimerDeleted);

        _hubConnection.On<string>(nameof(IGoalsHub.JobsBuilded), OnJobsBuilded);

        await _hubConnection.StartAsync();
    }

    private async Task OpenGoalsDialog() {
        DialogParameters parameters = new()
            {
                Title = "Goals",
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                Width = "40vw",
                Modal = false,
                PreventScroll = false,
                Alignment = HorizontalAlignment.Right,
                ShowDismiss = true,
            };

        IDialogReference dialog = await DialogService.ShowPanelAsync<Goals>(parameters);
        await dialog.Result;
    }


    private async Task ShowGoalDetails(int goalId) {
        SetActiveGoalData();
        var url = NavManager.ToAbsoluteUri($"api/goals/{goalId}").AbsoluteUri;

        var response = await Http.GetFromJsonAsync<GoalDetailsData>(url);
        SetGoalData(response);
    }
    private async Task ShowActiveGoalDetails(int goalId) {
        SetGoalData();
        var url = NavManager.ToAbsoluteUri($"api/goals/active/{goalId}").AbsoluteUri;

        var response = await Http.GetFromJsonAsync<ActiveGoalDetailsData>(url);
        SetActiveGoalData(response);
    }

    private void SetGoalData(GoalDetailsData? data = default) {
        GoalEditFormModel = GoalEditForm.Create(data);
    }

    private void SetActiveGoalData(ActiveGoalDetailsData? data = default) {
        ActiveGoalEditFormModel = ActiveGoalEditForm.Create(data);
    }

    private async Task SaveGoalChanges() {
        if (GoalEditFormModel.IsEmpty) return;
        var (goalId, name, contractorId) = GoalEditFormModel;
        GoalHeaderChangesSaveData request = new(goalId, _userId, name, contractorId);

        var url = NavManager.ToAbsoluteUri($"api/goals/save/header").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private void ClearGoalForm() {
        GoalEditFormModel = GoalEditForm.Create();
    }


    private async Task SaveActiveGoalChanges() {
        if (ActiveGoalEditFormModel.IsEmpty) return;
        var (goalId, name, contractorId, comment) = ActiveGoalEditFormModel;
        ActiveGoalHeaderChangesSaveData request = new(goalId, _userId, name, contractorId, comment);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/save/header").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private void ClearActiveGoalForm() {
        ActiveGoalEditFormModel = ActiveGoalEditForm.Create();
    }

    private void ShowHideActiveGoalTimes() {
        _showTimes = !_showTimes;
    }

    private async Task AddTimeActiveGoal() {
        if (ActiveGoalEditFormModel.IsEmpty) return;
        ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create();
        await OpenDialog(AddTimeActiveGoalCompletion);
    }

    private async Task EditTimeActiveGoal(ActiveGoalTimeData item) {
        if (ActiveGoalEditFormModel.IsEmpty) return;
        ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create(item);
        await OpenDialog(EditTimeActiveGoalCompletion);
    }

    private async ValueTask OpenDialog(Func<TimeRange, ValueTask> dialogCompletion) {
        if (_dialogRef is null) return;

        _dialogCompletion = dialogCompletion;
        await _dialogRef.OpenDialog(new () {
            Start = ActiveGoalTimeEditFormModel.Start,
            End = ActiveGoalTimeEditFormModel.End
        });
    }

    private async Task DialogClosed(TimeRange? range) {
        if(_dialogCompletion is not null) await _dialogCompletion.Invoke(range);
        _dialogCompletion = null;
    }

    private async ValueTask AddTimeActiveGoalCompletion(TimeRange? timeRange) {
        if (ActiveGoalEditFormModel.IsEmpty || timeRange is null) {
            ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create();
            return;
        }

        GoalTimeCreationData request = new(
            ActiveGoalEditFormModel.Id,
            _userId,
            timeRange.Start,
            timeRange.End,
            timeRange.End - timeRange.Start);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/time/add").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private async ValueTask EditTimeActiveGoalCompletion(TimeRange? timeRange) {
        if (ActiveGoalEditFormModel.IsEmpty || timeRange is null) {
            ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create();
            return;
        }

        GoalTimeEditData request = new(
            ActiveGoalEditFormModel.Id,
            ActiveGoalTimeEditFormModel.Id,
            _userId,
            timeRange.Start,
            timeRange.End,
            timeRange.End - timeRange.Start);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/time/edit").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private async Task DeleteTime(ActiveGoalTimeData time) {
        GoalTimeDeleteData request = new(ActiveGoalEditFormModel.Id, time.Id, _userId);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/time/delete").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }


    private async Task OnActiveGoalHeaderEdited(int goalId, string userId, ActiveGoalHeaderData data) {
        if (_userId != userId) return;
        bool changed = false;
        if (GoalEditFormModel.ActiveGoalId == goalId) {
            GoalEditFormModel.Set(data);
            changed = true;
            return;
        }
        if (ActiveGoalEditFormModel.Id == goalId) {
            ActiveGoalEditFormModel.Set(data);
            changed = true;
            return;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalHeaderEdited(int goalId, string userId, GoalHeaderData data) {
        if (_userId != userId) return;
        bool changed = false;
        if (GoalEditFormModel.ActiveGoalId == goalId) {
            GoalEditFormModel.Set(data);
            changed = true;
            return;
        }
        if (ActiveGoalEditFormModel.Id == goalId) {
            ActiveGoalEditFormModel.Set(data);
            changed = true;
            return;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalActivated(int goalId, int activeGoalId, string userId, ActiveGoalData data) {
        if (_userId != userId) return;

        bool changed = false;

        if (GoalEditFormModel.Id == data.GoalId) {
            GoalEditFormModel.ActiveGoalId = data.Id;
            changed = true;
        }

        if (ActiveGoalEditFormModel.Id != goalId) {
            ActiveGoalEditFormModel.ActiveTimerId = data.ActiveTimerId;
            changed = true;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalDeleted(int goalId, string userId) {
        if (_userId != userId) return;
        if (GoalEditFormModel.Id == goalId) {
            GoalEditFormModel = GoalEditForm.Create();
        }
        if (ActiveGoalEditFormModel.GoalId == goalId) {
            ActiveGoalEditFormModel = ActiveGoalEditForm.Create();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalDeleted(int goalId, string userId) {
        if (_userId != userId) return;
        if (GoalEditFormModel.Id == goalId) {
            GoalEditFormModel.ActiveGoalId = null;
        }
        if (ActiveGoalEditFormModel.GoalId == goalId) {
            ActiveGoalEditFormModel = ActiveGoalEditForm.Create();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalTimerDeleted(int goalId, int timerId, string userId, TimeSpan goalTotalTime) {
        if (_userId != userId) return;
        if (ActiveGoalEditFormModel.Id != goalId) return;

        ActiveGoalTimeData? goalTime = ActiveGoalEditFormModel.GoalTime.Find(x => x.Id == timerId);
        if (goalTime is null) return;

        ActiveGoalEditFormModel.GoalTime.Remove(goalTime);

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalTimerCreated(int goalId, string userId, ActiveGoalTimeData timerData, TimeSpan _) {
        if (_userId != userId) return;
        if (ActiveGoalEditFormModel.Id != goalId) return;

        ActiveGoalTimeData? goalTime = ActiveGoalEditFormModel.GoalTime.Find(x => x.Id == timerData.Id);
        if (goalTime is not null) return;
        ActiveGoalEditFormModel.GoalTime.Add(timerData);

        ActiveGoalEditFormModel.GoalTime.Sort();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalTimerEdited(int goalId, string userId, ActiveGoalTimeData timerData, TimeSpan _) {
        if (_userId != userId) return;
        if (ActiveGoalEditFormModel.Id != goalId) return;

        ActiveGoalTimeData? goalTime = ActiveGoalEditFormModel.GoalTime.Find(x => x.Id == timerData.Id);
        if (goalTime is null) return;

        goalTime.Start = timerData.Start;
        goalTime.End = timerData.End;
        goalTime.Time = timerData.End - timerData.Start;

        ActiveGoalEditFormModel.GoalTime.Sort();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalTimerStopped(int goalId, string userId, TimeSpan _) {
        if (_userId != userId) return;
        if (ActiveGoalEditFormModel.Id != goalId) return;

        ActiveGoalEditFormModel.ActiveTimerId = null;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnJobsBuilded(string userId) {
        if (_userId != userId) return;

        if (ActiveGoalEditFormModel.IsEmpty) return;

        ActiveGoalEditFormModel = ActiveGoalEditForm.Create();

        await InvokeAsync(StateHasChanged);
    }


    class GoalEditForm() {
        private static GoalEditForm Empty { get; set; } = new();
        public bool IsEmpty => ReferenceEquals(this, Empty);

        public int Id { get; set; }
        public int? ActiveGoalId { get; set; }

        public string Name { get; set; } = string.Empty;
        public int? Contractor { get; set; }

        public static GoalEditForm Create(GoalDetailsData? data = default) {
            if (data is null) return Empty;
            return new() {
                    Id = data.Id,
                    Name = data.Name,
                    Contractor = data.Contractor?.Id ?? 0,
                    ActiveGoalId = data.ActiveGoalId
                };
        }

        public void Set(GoalHeaderData data) {
            Name = data.Name;
            Contractor = data.Contractor?.Id;
        }
        public virtual void Set(ActiveGoalHeaderData data) {
            Name = data.Name;
            Contractor = data.Contractor?.Id;
        }

        public void Deconstruct(out int id, out string name, out int? contractor) {
            id = Id;
            name = Name;
            contractor = Contractor;
        }
    }

    class ActiveGoalEditForm() : GoalEditForm {
        private static ActiveGoalEditForm Empty { get; set; } = new();
        public new bool IsEmpty => ReferenceEquals(this, Empty);
        public int GoalId { get; set; }

        public string Comment { get; set; } = string.Empty;

        public int? ActiveTimerId { get; set; }

        public List<ActiveGoalTimeData> GoalTime { get; set; } = new();

        public static ActiveGoalEditForm Create(ActiveGoalDetailsData? data = default) {
            if (data is null) return Empty;
            return new() {
                    Id = data.Id,
                    Name = data.Name,
                    Contractor = data.Contractor?.Id ?? 0,
                    Comment = data.Comment,
                    GoalId = data.GoalId,
                    GoalTime = data.GoalTime
                };
        }

        public override void Set(ActiveGoalHeaderData data) {
            base.Set(data);
            Comment = data.Comment;
        }

        public void Deconstruct(out int id, out string name, out int? contractor, out string comment) {
            id = Id;
            name = Name;
            contractor = Contractor;
            comment = Comment;
        }
    }

    class ActiveGoalTimeEditForm {
        public int Id { get; set; }
        public DateTimeOffset Start { get; set; }
        public DateTimeOffset End { get; set; }

        public static ActiveGoalTimeEditForm Create(ActiveGoalTimeData? data = default) {
            if (data is null) {
				var rangeValue = DateTimeOffset.Now;
				return new() {
						Start = rangeValue,
						End = rangeValue
					};
			}

            return new() {
                    Id = data.Id,
                    Start = data.Start,
                    End = data.End
                };
        }
    }
}