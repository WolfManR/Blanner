
@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
@rendermode InteractiveServerNotPrerendered

<h3>Active goals</h3>

<div class="grid" tabindex="-1">
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Total time</th>
				<th>Name</th>
				<th>Elapsed</th>
				<th class="d-flex justify-content-end btn-group-lg">
					<button class="btn btn-outline-secondary" @onclick="() => Complete()">Complete</button>
					<button class="btn btn-outline-primary" @onclick="() => BuildJob()">Build Job</button>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var (key, value) in _goalsGroups) {
				@if (value.Count > 0) {
					Contractor? keyValue = key;

					<tr class="item-header">
						<td colspan="3" class="fw-bold">@(keyValue?.Name ?? "Others")</td>
						<td class="d-flex justify-content-end">
							<button class="btn btn-danger" @onclick="() => DeleteContractorGroup(key)" disabled><i class="bi bi-trash3"></i></button>
						</td>
					</tr>

					@foreach (var item in value) {
						<tr class="item" @onclick="() => SelectGoal(item)">
							<td>@item.TotalElapsedTime.ToString(UserSettings.TimeFormatterValue())</td>
							<td>@item.Name</td>
							<td>@item.TimerTime.ToString(UserSettings.DetailedTimeFormatterValue())</td>
							<td class="d-flex justify-content-between">
								@if (item.Tick) {
									<button class="btn btn-danger" @onclick="() => StopGoal(item)" @onclick:stopPropagation="true"><i class="bi bi-stop-circle"></i></button>
								}
								else {
									<button class="btn btn-success" @onclick="() => ActivateGoal(item)" @onclick:stopPropagation="true"><i class="bi bi-play-fill"></i></button>
								}
								<button class="btn btn-danger" @onclick="() => DeleteGoal(key, item)" @onclick:stopPropagation="true"><i class="bi bi-trash3"></i></button>
							</td>
						</tr>
					}
				}
			}
		</tbody>
	</table>
</div>

@code {
	private HubConnection? _hubConnection;

	private string _userId = "";
	private List<ActiveGoalVM> _goals = new();
	private Dictionary<Value<Contractor, int>, List<ActiveGoalVM>> _goalsGroups = new();

	[Parameter]
	public EventCallback<int> OnSelected { get; set; }
	public UserSettings? UserSettings { get; set; }

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";

		await LoadGoals();

		_hubConnection = new HubConnectionBuilder().WithUrl(NavManager.GoalsHubUri()).Build();

		_hubConnection.On<int, int, string>(nameof(IGoalsHub.Tick), OnTimerTick);

		_hubConnection.On<int, string, ActiveGoalHeaderData>(nameof(IGoalsHub.ActiveGoalHeaderEdited), OnActiveGoalHeaderEdited);
		_hubConnection.On<int, string>(nameof(IGoalsHub.GoalDeleted), OnGoalDeleted);
		_hubConnection.On<int, string>(nameof(IGoalsHub.ActiveGoalDeleted), OnActiveGoalDeleted);

		_hubConnection.On<int, string, TimeSpan>(nameof(IGoalsHub.TimerStopped), OnTimerStopped);
		_hubConnection.On<int, int, string, TimerEditData>(nameof(IGoalsHub.TimerEdited), OnTimerEdited);
		_hubConnection.On<int, int, string, ActiveGoalData>(nameof(IGoalsHub.GoalActivated), OnGoalActivated);

		_hubConnection.On<int, int, string, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerDeleted), OnActiveGoalTimerDeleted);
		_hubConnection.On<int, string, ActiveGoalTimeData, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerCreated), OnActiveGoalTimerCreated);
		_hubConnection.On<int, string, ActiveGoalTimeData, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerEdited), OnActiveGoalTimerEdited);

		_hubConnection.On<string>(nameof(IGoalsHub.JobsBuilded), OnJobsBuilded);

		await _hubConnection.StartAsync();
	}

	private async Task LoadGoals() {
		var url = NavManager.GetUriWithQueryParameters(
			NavManager.ToAbsoluteUri("api/goals/active").AbsoluteUri,
			new Dictionary<string, object?> {
				{ "userId",  _userId }
			});

		var response = await Http.GetFromJsonAsync<List<ActiveGoalData>>(url);
		SetGoalsQuery(response);
	}

	private void SetGoalsQuery(List<ActiveGoalData>? data) {
		if (data is null) {
			_goals.Clear();
			_goalsGroups.Clear();
			return;
		}
		_goals = data.Select(x=> new ActiveGoalVM(x)).ToList();
		var groups = _goals.GroupBy(x => x.Contractor, x => x);
		_goalsGroups = groups.ToDictionary(x => new Value<Contractor, int>(x.Key), x => x.ToList());
	}

	private async Task SelectGoal(ActiveGoalVM item) {
		if (OnSelected.HasDelegate) await OnSelected.InvokeAsync(item.Id);
	}

	private Task DeleteContractorGroup(Value<Contractor, int> groupKey) {
		// if(_goalsGroups.Remove(groupKey, out var list)) {
		// 	_goals.RemoveAll(x => list.Contains(x));
		// }
		return Task.CompletedTask;
	}

	private async Task ActivateGoal(ActiveGoalVM item) {
		TimerActivationData request = new(null, item.Id, DateTimeOffset.Now, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/active/start").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task StopGoal(ActiveGoalVM item) {
		TimerDeactivationData request = new(item.Id, _userId, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/goals/active/stop").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task DeleteGoal(Value<Contractor, int> groupKey, ActiveGoalVM item) {
		GoalDeleteData request = new(item.Id, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/active/delete").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task Complete() {
		CompleteJobData request = new(_userId, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/goals/active/complete").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task BuildJob() {
		BuildJobData request = new(_userId, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/jobs/build").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}


	private async Task OnTimerTick(int goalId, int timerId, string userId) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.ActiveTimerId == timerId);
		if (goal is null) return;

		goal.TickTime();

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalHeaderEdited(int goalId, string userId, ActiveGoalHeaderData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.Set(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalHeaderEdited(int goalId, string userId, GoalHeaderData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
		if (goal is null) return;

		goal.Set(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnTimerStopped(int goalId, string userId, TimeSpan timeTotal) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = timeTotal;
		goal.ActiveTimerId = 0;
		goal.TimerTime = TimeSpan.Zero;
		goal.Tick = false;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnTimerEdited(int goalId, int timerId, string userId, TimerEditData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = data.Time;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalActivated(int goalId, int activeGoalId, string userId, ActiveGoalData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == activeGoalId);
		if (goal is null)
		{
			goal = new(data);
			_goals.Insert(0, goal);
			Value<Contractor, int> contractor = new(data.Contractor);
			List<ActiveGoalVM>? activeGoals;
			if (!_goalsGroups.TryGetValue(contractor, out activeGoals)) {
				_goalsGroups.Add(contractor, activeGoals ??= new());
			}
			activeGoals.Insert(0, goal);
		}
		else {
			goal.SetActiveData(data);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalDeleted(int goalId, string userId) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
		if (goal is null) return;

		_goals.Remove(goal);
		Value<Contractor, int> contractor = new(goal.Contractor);
		if (_goalsGroups.TryGetValue(contractor, out var goals)) {
			goals.Remove(goal);
			if (goals.Count == 0) _goalsGroups.Remove(contractor);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalDeleted(int goalId, string userId) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
		if (goal is null) return;

		_goals.Remove(goal);
		Value<Contractor, int> contractor = new(goal.Contractor);
		if (_goalsGroups.TryGetValue(contractor, out var goals)) {
			goals.Remove(goal);
			if (goals.Count == 0) _goalsGroups.Remove(contractor);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimerDeleted(int goalId, int timerId, string userId, TimeSpan goalTotalTime) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimerCreated(int goalId, string userId, ActiveGoalTimeData _, TimeSpan goalTotalTime) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimerEdited(int goalId, string userId, ActiveGoalTimeData _, TimeSpan goalTotalTime) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnJobsBuilded(string userId) {
		if (_userId != userId) return;
		await LoadGoals();

		await InvokeAsync(StateHasChanged);
	}

	class ActiveGoalVM() {
		public int Id { get; private set; }
		public string Name { get; set; } = string.Empty;
		public string Comment { get; set; } = string.Empty;
		public Contractor? Contractor { get; set; }
		public int GoalId { get; set; }
		// ToDo
		public TimeSpan TotalElapsedTime { get; set; }
		public TimeSpan TimerTime { get; set; }
		public DateTimeOffset ActivationTime { get; set; }
		public int? ActiveTimerId { get; set; }

		public bool Tick { get; set; }

		public bool IsOnEdit { get; set; }

		public ActiveGoalVM(ActiveGoalData data) : this() {
			Id = data.Id;
			Name = data.Name;
			Comment = data.Comment;
			Contractor = data.Contractor;
			GoalId = data.GoalId;
			TotalElapsedTime = data.TotalElapsedTime;
			ActivationTime = data.ActivationTime;
			ActiveTimerId = data.ActiveTimerId;
			Tick = data.ActiveTimerId is not null;
			TimerTime = Tick ? DateTimeOffset.Now - ActivationTime : TimeSpan.Zero;
		}

		public void Set(ActiveGoalHeaderData data) {
			Name = data.Name;
			Comment = data.Comment;
			Contractor = data.Contractor;
		}
		public void Set(GoalHeaderData data) {
			Name = data.Name;
			Contractor = data.Contractor;
		}

		public void SetActiveData(ActiveGoalData data) {
			TotalElapsedTime = data.TotalElapsedTime;
			ActivationTime = data.ActivationTime;
			ActiveTimerId = data.ActiveTimerId;
			Tick = data.ActiveTimerId is not null;
			TimerTime = Tick ? DateTimeOffset.Now - ActivationTime : TimeSpan.Zero;
		}

		public void TickTime() {
			TimerTime = Tick ? DateTimeOffset.Now - ActivationTime : TimeSpan.Zero;
		}
	}
}
