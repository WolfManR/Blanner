@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
@rendermode InteractiveServerNotPrerendered

<h3>Active goals</h3>

<CascadingValue Value="UserSettings">
	@* <div class="grid" tabindex="-1"> *@
	<div class="goals-table">
		<div class="goals-table-header row fw-bold align-items-baseline pb-1">
			<div class="col-2">Total time</div>
			<div class="col-4">Name</div>
			<div class="col-3">Elapsed</div>
			<div class="col-3 d-flex justify-content-end btn-group">
				<button class="btn btn-outline-secondary" @onclick="() => Complete()">Complete</button>
				<button class="btn btn-outline-primary" @onclick="() => BuildJob()">Build Job</button>
			</div>
		</div>
		<div class="goals-table-body">
			@foreach (var (key, value) in _goalsGroups) {
				@if (value.Count > 0) {
					Contractor? keyValue = key;

					<div class="row goals-table-item item-header align-items-baseline">
						<div class="col-9 fw-bold">@(keyValue?.Name ?? "Others")</div>
						<div class="col-3 d-flex justify-content-end">
							<button class="btn btn-danger" @onclick="() => DeleteContractorGroup(key)" disabled><i class="bi bi-trash3"></i></button>
						</div>
					</div>

					@foreach (var item in value) {
						<ActiveGoalRow Goal="item">
							<RowTemplate>
								<div class="row goals-table-item item align-items-baseline" @onclick="() => SelectGoal(context)">
									<div class="col-2">@context.TotalElapsedTime.ToString(UserSettings.TimeFormatterValue())</div>
									<div class="col-4">@context.Name</div>
									<div class="col-3">@context.TimerTime.ToString(UserSettings.DetailedTimeFormatterValue())</div>
									<div class="col-3 d-flex justify-content-between align-bottom">
										@if (context.Tick) {
											<button class="btn btn-danger" @onclick="() => StopGoal(context)" @onclick:stopPropagation="true"><i class="bi bi-stop-circle"></i></button>
										}
										else {
											<button class="btn btn-success" @onclick="() => ActivateGoal(context)" @onclick:stopPropagation="true"><i class="bi bi-play-fill"></i></button>
										}
										<button class="btn btn-danger" @onclick="() => DeleteGoal(key, context)" @onclick:stopPropagation="true"><i class="bi bi-trash3"></i></button>
									</div>
								</div>
							</RowTemplate>
						</ActiveGoalRow>
					}
				}
			}
		</div>
	</div>
	@* </div> *@
</CascadingValue>

@code {
	private HubConnection? _hubConnection;

	private string _userId = "";
	private List<ActiveGoalVM> _goals = new();
	private Dictionary<Value<Contractor, int>, List<ActiveGoalVM>> _goalsGroups = new();

	[Parameter]
	public EventCallback<int> OnSelected { get; set; }
	public UserSettings? UserSettings { get; set; }

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";

		await LoadGoals();

		_hubConnection = new HubConnectionBuilder().WithUrl(NavManager.GoalsHubUri()).Build();

		_hubConnection.On<int, string, ActiveGoalHeaderData>(nameof(IGoalsHub.ActiveGoalHeaderEdited), OnActiveGoalHeaderEdited);
		_hubConnection.On<int, string>(nameof(IGoalsHub.GoalDeleted), OnGoalDeleted);
		_hubConnection.On<int, string>(nameof(IGoalsHub.ActiveGoalDeleted), OnActiveGoalDeleted);

		_hubConnection.On<int, string, TimeSpan>(nameof(IGoalsHub.TimerStopped), OnTimerStopped);
		_hubConnection.On<int, int, string, TimerEditData>(nameof(IGoalsHub.TimerEdited), OnTimerEdited);
		_hubConnection.On<int, int, string, ActiveGoalData>(nameof(IGoalsHub.GoalActivated), OnGoalActivated);

		_hubConnection.On<int, int, string, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerDeleted), OnActiveGoalTimerDeleted);
		_hubConnection.On<int, string, ActiveGoalTimeData, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerCreated), OnActiveGoalTimerCreated);
		_hubConnection.On<int, string, ActiveGoalTimeData, TimeSpan>(nameof(IGoalsHub.ActiveGoalTimerEdited), OnActiveGoalTimerEdited);

		_hubConnection.On<string>(nameof(IGoalsHub.JobsBuilded), OnJobsBuilded);

		await _hubConnection.StartAsync();
	}

	private async Task LoadGoals() {
		var url = NavManager.GetUriWithQueryParameters(
			NavManager.ToAbsoluteUri("api/goals/active").AbsoluteUri,
			new Dictionary<string, object?> {
				{ "userId",  _userId }
					});

		var response = await Http.GetFromJsonAsync<List<ActiveGoalData>>(url);
		SetGoalsQuery(response);
	}

	private void SetGoalsQuery(List<ActiveGoalData>? data) {
		if (data is null) {
			_goals.Clear();
			_goalsGroups.Clear();
			return;
		}
		_goals = data.Select(x => new ActiveGoalVM(x)).ToList();
		var groups = _goals.GroupBy(x => new Value<Contractor, int>(x.Contractor));
		_goalsGroups = groups.ToDictionary(x => x.Key, x => x.ToList());
	}

	private async Task SelectGoal(ActiveGoalVM item) {
		if (OnSelected.HasDelegate) await OnSelected.InvokeAsync(item.Id);
	}

	private Task DeleteContractorGroup(Value<Contractor, int> groupKey) {
		// if(_goalsGroups.Remove(groupKey, out var list)) {
		// 	_goals.RemoveAll(x => list.Contains(x));
		// }
		return Task.CompletedTask;
	}

	private async Task ActivateGoal(ActiveGoalVM item) {
		TimerActivationData request = new(null, item.Id, DateTimeOffset.Now, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/active/start").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task StopGoal(ActiveGoalVM item) {
		TimerDeactivationData request = new(item.Id, _userId, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/goals/active/stop").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task DeleteGoal(Value<Contractor, int> groupKey, ActiveGoalVM item) {
		GoalDeleteData request = new(item.Id, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/active/delete").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task Complete() {
		CompleteJobData request = new(_userId, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/goals/active/complete").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task BuildJob() {
		BuildJobData request = new(_userId, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/jobs/build").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task OnActiveGoalHeaderEdited(int goalId, string userId, ActiveGoalHeaderData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.Set(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalHeaderEdited(int goalId, string userId, GoalHeaderData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
		if (goal is null) return;

		goal.Set(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnTimerStopped(int goalId, string userId, TimeSpan timeTotal) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = timeTotal;
		goal.ActiveTimerId = 0;
		goal.TimerTime = TimeSpan.Zero;
		goal.Tick = false;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnTimerEdited(int goalId, int timerId, string userId, TimerEditData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = data.Time;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalActivated(int goalId, int activeGoalId, string userId, ActiveGoalData data) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == activeGoalId);
		if (goal is null) {
			goal = new(data);
			_goals.Insert(0, goal);
			Value<Contractor, int> contractor = new(data.Contractor);
			List<ActiveGoalVM>? activeGoals;
			if (!_goalsGroups.TryGetValue(contractor, out activeGoals)) {
				_goalsGroups.Add(contractor, activeGoals ??= new());
			}
			activeGoals.Insert(0, goal);
		}
		else {
			goal.SetActiveData(data);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalDeleted(int goalId, string userId) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
		if (goal is null) return;

		_goals.Remove(goal);
		Value<Contractor, int> contractor = new(goal.Contractor);
		if (_goalsGroups.TryGetValue(contractor, out var goals)) {
			goals.Remove(goal);
			if (goals.Count == 0) _goalsGroups.Remove(contractor);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalDeleted(int goalId, string userId) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
		if (goal is null) return;

		_goals.Remove(goal);
		Value<Contractor, int> contractor = new(goal.Contractor);
		if (_goalsGroups.TryGetValue(contractor, out var goals)) {
			goals.Remove(goal);
			if (goals.Count == 0) _goalsGroups.Remove(contractor);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimerDeleted(int goalId, int timerId, string userId, TimeSpan goalTotalTime) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimerCreated(int goalId, string userId, ActiveGoalTimeData _, TimeSpan goalTotalTime) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimerEdited(int goalId, string userId, ActiveGoalTimeData _, TimeSpan goalTotalTime) {
		if (_userId != userId) return;
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnJobsBuilded(string userId) {
		if (_userId != userId) return;
		await LoadGoals();

		await InvokeAsync(StateHasChanged);
	}
}
