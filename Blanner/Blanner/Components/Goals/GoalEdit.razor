@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
@rendermode InteractiveServerNotPrerendered
@implements IDialogContentComponent<GoalEditParameters>

<FluentDialogBody>
	<EditForm FormName="GoalEditForm" Model="GoalEditFormModel" class="d-flex flex-column gap-2 mt-3">
		<div class="input-group mb-3">
			<label class="input-group-text" for="goalContractorInput">Contractor</label>
			<InputSelect class="form-select" @bind-Value="GoalEditFormModel.Contractor" id="goalContractorInput" DisplayName="Contractor">
				<option value="0">Empty</option>
				@foreach (var item in Contractors) {
					<option value="@item.Id">@item.Name</option>
				}
			</InputSelect>
		</div>

		<div class="input-group mb-3">
			<label class="input-group-text">Name</label>
			<InputText class="form-control" @bind-Value="GoalEditFormModel.Name" DisplayName="Name" />
		</div>
	</EditForm>
</FluentDialogBody>

<FluentDialogFooter>
	<FluentButton Appearance="Appearance.Accent" OnClick="SaveGoalChanges" IconStart="@(new Icons.Regular.Size24.Save())">Save</FluentButton>
</FluentDialogFooter>



@code {
    private GoalEditForm GoalEditFormModel { get; set; } = GoalEditForm.Create();
    private string _userId = "";
    private List<Contractor> Contractors { get; set; } = new();

    [Parameter]
    public GoalEditParameters Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override async Task OnInitializedAsync() {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userId = UserManager.GetUserId(state.User) ?? "";

        var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
        Contractors = await Http.GetFromJsonAsync<List<Contractor>>(uri) ?? new();

        var url = NavManager.ToAbsoluteUri($"api/goals/{Content.Id}").AbsoluteUri;

        var data = await Http.GetFromJsonAsync<GoalDetailsData>(url);
        GoalEditFormModel = GoalEditForm.Create(data);
    }

    protected override Task OnParametersSetAsync() {
        return base.OnParametersSetAsync();
    }

    private async Task SaveGoalChanges() {
        if (GoalEditFormModel.IsEmpty) return;
		var (goalId, name, contractorId) = GoalEditFormModel;
		GoalHeaderChangesSaveData request = new(goalId, _userId, name, contractorId);

		var url = NavManager.ToAbsoluteUri($"api/goals/save/header").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);

		await Dialog.CloseAsync();
	}
}
