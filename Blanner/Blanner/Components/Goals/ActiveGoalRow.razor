
@implements IAsyncDisposable

<tr class="item" @onclick="Select">
	<td>@Goal.TotalElapsedTime.ToString(UserSettings.TimeFormatterValue())</td>
	<td>@Goal.Name</td>
	<td>@Goal.TimerTime.ToString(UserSettings.DetailedTimeFormatterValue())</td>
	<td class="d-flex justify-content-between">
		@if (Goal.Tick) {
			<button class="btn btn-danger" @onclick="StopTimer" @onclick:stopPropagation="true"><i class="bi bi-stop-circle"></i></button>
		}
		else {
			<button class="btn btn-success" @onclick="ActivateTimer" @onclick:stopPropagation="true"><i class="bi bi-play-fill"></i></button>
		}
		<button class="btn btn-danger" @onclick="Delete" @onclick:stopPropagation="true"><i class="bi bi-trash3"></i></button>
	</td>
</tr>

@code {
	[Parameter, EditorRequired]
	public ActiveGoalVM Goal { get; set; } = new();

	[CascadingParameter]
	public UserSettings? UserSettings { get; set; }

	[Parameter]
	public EventCallback<ActiveGoalVM> OnSelect { get; set; }
	[Parameter]
	public EventCallback<ActiveGoalVM> OnStopTimer { get; set; }
	[Parameter]
	public EventCallback<ActiveGoalVM> OnActivateTimer { get; set; }
	[Parameter]
	public EventCallback<ActiveGoalVM> OnDelete { get; set; }

	public Timer? Timer { get; set; }

	protected override void OnInitialized() {
		Timer = new Timer(UpdateTime, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
	}

	private void UpdateTime(object? _) {
		if (!Goal.Tick) return;

		Goal.TickTime();
		InvokeAsync(StateHasChanged);
	}

	private async Task Select() {
		if (OnSelect.HasDelegate) await OnSelect.InvokeAsync(Goal);
	}

	private async Task StopTimer() {
		if (OnStopTimer.HasDelegate) await OnStopTimer.InvokeAsync(Goal);
	}

	private async Task ActivateTimer() {
		if (OnActivateTimer.HasDelegate) await OnActivateTimer.InvokeAsync(Goal);
	}

	private async Task Delete() {
		if (OnDelete.HasDelegate) await OnDelete.InvokeAsync(Goal);
	}

	public async ValueTask DisposeAsync() {
		if(Timer is not null) await Timer.DisposeAsync();
	}
}
