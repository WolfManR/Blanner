@page "/sticky"
@using System.Globalization
@inject StickyNoteClient Client
@rendermode InteractiveServer

<div style="width: 100%; height: calc(100% - 4rem);">
<button @onclick="() => Client.CreateNote(10, 10)">Create Sticky Note ➕</button>
<button @onclick="Client.ClearNotes">Clear All Sticky Notes ❌</button>

<svg width="100%" height="100%"
	 @onpointerup="Up"
	 @onpointerleave="Up"
	 @onpointermove="Move">
	<defs>
		<filter id="shadow" x="0" y="0" width="200%" height="200%">
			<feOffset result="offOut" in="SourceAlpha" dx="5" dy="5" />
			<feGaussianBlur result="blurOut" in="offOut" stdDeviation="2.5" />
			<feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
		</filter>
	</defs>
	@if (_notes is not null) {
		@foreach (Note note in _notes) {

			<!-- This is where each Note will be drawn -->
			<rect fill="@(note.CanLock(Client.ConnectionId) ? "#FFFF8F" : "#FFDF8F")"
				  x="@note.X.ToString(CultureInfo.InvariantCulture)"
				  y="@note.Y.ToString(CultureInfo.InvariantCulture)"
				  stroke="#DDDD80"
				  stroke-width="1"
				  width="200px"
				  height="200px"
				  filter="url(#shadow)">
			</rect>

			<foreignObject x="@note.X.ToString(CultureInfo.InvariantCulture)" y="@((note.Y+30).ToString(CultureInfo.InvariantCulture))" width="200px" height="170px">
				<textarea @bind=note.Text
						  @bind:event="oninput"
						  @bind:after="() => Client.UpdateNoteText(note.Id, note.Text)"
						  disabled="@(!note.CanLock(Client.ConnectionId))"
						  class="note-textarea">
				</textarea>
			</foreignObject>

			<text>
				<text @onclick="() => Client.DeleteNote(note.Id)"
					  x="@note.X.ToString(CultureInfo.InvariantCulture)"
					  y="@note.Y.ToString(CultureInfo.InvariantCulture)"
					  alignment-baseline="before-edge"
					  class="note-markers"
					  style="pointer-events:@(note.CanLock(Client.ConnectionId) ? "inherit" : "none")">
					❌
				</text>
				<text @onpointerdown="e => Down(note, e)"
					  x="@((note.X+180).ToString(CultureInfo.InvariantCulture))"
					  y="@note.Y.ToString(CultureInfo.InvariantCulture)"
					  alignment-baseline="before-edge"
					  class="note-markers"
					  style="pointer-events:@(note.CanLock(Client.ConnectionId) ? "inherit" : "none")">
					@(note == _editNote || !note.CanLock(Client.ConnectionId) ? "📌" : "📍")
				</text>
			</text>
		}
	}
</svg>
</div>

@code
{
	private List<Note>? _notes;
	private (double x, double y)? _anchor;
	private Note? _editNote;

	protected override async Task OnInitializedAsync() {
		Client.OnNoteCreated += NoteCreated;
		Client.OnNoteUpdated += NoteUpdated;
		Client.OnNoteDeleted += NoteDeleted;
		await Client.Start();
		_notes = await Client.LoadNotes();
	}

	private Task NoteCreated(Note note) {
		_notes?.Add(note);
		StateHasChanged();
		return Task.CompletedTask;
	}

	private Task NoteUpdated(Note note) {
		if (_notes?.FirstOrDefault(n => n.Id == note.Id) is not { } localNote)
			return Task.CompletedTask;
		localNote.Text = note.Text;
		localNote.X = note.X;
		localNote.Y = note.Y;
		localNote.LastLockingUser = note.LastLockingUser;
		localNote.LastEdited = note.LastEdited;
		StateHasChanged();
		return Task.CompletedTask;
	}

	private Task NoteDeleted(Guid id) {
		if (_notes?.FirstOrDefault(n => n.Id == id) is not { } localNote)
			return Task.CompletedTask;
		_notes.Remove(localNote);
		StateHasChanged();
		return Task.CompletedTask;
	}

	private async Task Down(Note note, PointerEventArgs eventArgs) {
		if (!await Client.LockNote(note.Id))
			return;
		note.Lock(Client.ConnectionId);
		_anchor = (eventArgs.ClientX, eventArgs.ClientY);
		_editNote = note;
	}

	private async Task Move(PointerEventArgs eventArgs) {
		if (_anchor is not var (x, y) || _editNote is null || !_editNote.CanLock(Client.ConnectionId))
			return;
		_editNote.X += eventArgs.ClientX - x;
		_editNote.Y += eventArgs.ClientY - y;
		_editNote.LastEdited = DateTimeOffset.UtcNow;
		_anchor = (eventArgs.ClientX, eventArgs.ClientY);
		await Client.MoveNote(_editNote.Id, _editNote.X, _editNote.Y);
	}

	private async Task Up(PointerEventArgs eventArgs) {
		await Move(eventArgs);
		_anchor = null;
		_editNote = null;
	}
}
