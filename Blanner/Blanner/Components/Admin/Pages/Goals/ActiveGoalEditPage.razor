@page "/Admin/ActiveGoals/{Id:int}"

@rendermode InteractiveServerNotPrerendered

@inject NavigationManager NavManager
@inject HttpClient Http
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm FormName="AdminActiveGoalEditForm" Model="this">
	<DataAnnotationsValidator />
	<FluentValidationSummary />

	<FluentStack Orientation="Orientation.Vertical">
		<input @bind-value="@Id" hidden />

		<div>
			<FluentTextField Name="Name" @bind-Value="Name" Label="Name" Style="width: 40rem" Required />
		</div>
		<div class="mb-3">
			<label>
				Contractor
				<InputSelect class="form-select" @bind-Value="Contractor" DisplayName="Contractor">
					<option value="0">Empty</option>
					@foreach (var item in _contractors) {
						<option value="@item.Id">@item.Name</option>
					}
				</InputSelect>
			</label>
		</div>

		<div class="mb-3">
			<label>
				User
				<InputSelect class="form-select" @bind-Value="User" DisplayName="User">
					<option value="0">Empty</option>
					@foreach (var item in _users) {
						<option value="@item.Id">@item.Name</option>
					}
				</InputSelect>
			</label>
		</div>

		<InputTextArea class="form-control" @bind-Value="Comment" style="height:40vh;" DisplayName="Comment" />
	</FluentStack>
</EditForm>

<div class="mt-2 mb-1">
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Id</th>
				<th>From</th>
				<th>To</th>
				<th>Time</th>
				<th>
					<div>
						<button class="btn-lg" @onclick="AddTimeActiveGoal" disabled="@(Id == 0)"><i class="bi bi-plus-square-fill"></i></button>
					</div>
				</th>
			</tr>
		</thead>

		<tbody>
			@foreach (var item in Timers) {
				<tr>
					<td>@item.Id</td>
					<td>@item.Start.ToString("t")</td>
					<td>@item.End.ToString("t")</td>
					<td>@item.Time.ToString(UserSettings.DetailedTimeFormatterValue())</td>
					<td>
						@if (item.Id != ActiveTimerId) {
							<div>
								<button class="btn btn-danger" @onclick="() => DeleteTime(item)"><i class="bi bi-trash3"></i></button>
								<button class="btn btn-info" @onclick="() => EditTimeActiveGoal(item)"><i class="bi bi-pencil-square"></i></button>
							</div>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<TimeRangeEditDialog @ref="_dialogRef" DialogCompletion="DialogClosed" />

<FluentStack>
	<FluentButton OnClick="Save">Save</FluentButton>
	@if (GoalId is not null) {
		<FluentAnchor Href="@($"/Admin/Goals/{GoalId}")">Stored</FluentAnchor>
	}
</FluentStack>


@code {
	private List<Contractor> _contractors = [];
	private List<UserSelectListData> _users = [];
	private string _userId = "";

	private TimeRangeEditDialog? _dialogRef;
	private Func<TimeRange?, ValueTask>? _dialogCompletion;
	private UserSettings? UserSettings { get; set; }
	private ActiveGoalTimeEditForm ActiveGoalTimeEditFormModel { get; set; } = ActiveGoalTimeEditForm.Create();


	[Parameter]
	public int Id { get; set; }

	public string? Name { get; set; }
	public int? Contractor { get; set; }
	public string? User { get; set; }
	public int? GoalId { get; set; }
	public string? Comment { get; set; }
	public int? ActiveTimerId { get; set; }
	public List<ActiveGoalTimeData> Timers { get; set; } = [];

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";


		var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
		_contractors = await Http.GetFromJsonAsync<List<Contractor>>(uri) ?? new();

		uri = NavManager.ToAbsoluteUri("api/users").AbsoluteUri;
		_users = await Http.GetFromJsonAsync<List<UserSelectListData>>(uri) ?? new();
	}

	protected override async Task OnParametersSetAsync() {
		if (Id == 0) return;
		var url = NavManager.ToAbsoluteUri($"api/goals/active/{Id}").AbsoluteUri;

		var entity = await Http.GetFromJsonAsync<ActiveGoalDetailsData>(url);
		if (entity is null) return;
		Name = entity.Name;
		Contractor = entity.Contractor?.Id;
		User = entity.User?.Id;
		Comment = entity.Comment;
		GoalId = entity.GoalId;
		Timers = entity.GoalTime;
		StateHasChanged();
	}

	private async Task Save() {
		if (Name is null) return;

		object request;
		string uri;

		if (Id == 0) {
			request = new GoalCreationData(Name, _userId);

			uri = "api/goals/active/save";
		}
		else {
			if (User is null) return;
			int? contractorId = Contractor;
			request = new GoalHeaderChangesSaveData(Id, User, Name, contractorId);

			uri = "api/goals/active/save/header";
		}

		var url = NavManager.ToAbsoluteUri(uri).AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);

		if (response.IsSuccessStatusCode) NavManager.NavigateTo("/Admin/ActiveGoals");
	}

	private async Task AddTimeActiveGoal() {
		ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create();
		await OpenDialog(AddTimeActiveGoalCompletion);
	}

	private async Task EditTimeActiveGoal(ActiveGoalTimeData item) {
		ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create(item);
		await OpenDialog(EditTimeActiveGoalCompletion);
	}

	private async ValueTask OpenDialog(Func<TimeRange?, ValueTask> dialogCompletion) {
		if (_dialogRef is null) return;

		_dialogCompletion = dialogCompletion;
		await _dialogRef.OpenDialog(new() {
				Start = ActiveGoalTimeEditFormModel.Start,
				End = ActiveGoalTimeEditFormModel.End
			});
	}

	private async Task DialogClosed(TimeRange? range) {
		if (_dialogCompletion is not null) await _dialogCompletion.Invoke(range);
		_dialogCompletion = null;
	}

	private async ValueTask AddTimeActiveGoalCompletion(TimeRange? timeRange) {
		if (timeRange is null) {
			ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create();
			return;
		}

		GoalTimeCreationData request = new(
			Id,
			_userId,
			timeRange.Start,
			timeRange.End,
			timeRange.End - timeRange.Start);

		var url = NavManager.ToAbsoluteUri($"api/goals/active/time/add").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async ValueTask EditTimeActiveGoalCompletion(TimeRange? timeRange) {
		if (timeRange is null) {
			ActiveGoalTimeEditFormModel = ActiveGoalTimeEditForm.Create();
			return;
		}

		GoalTimeEditData request = new(
			Id,
			ActiveGoalTimeEditFormModel.Id,
			_userId,
			timeRange.Start,
			timeRange.End,
			timeRange.End - timeRange.Start);

		var url = NavManager.ToAbsoluteUri($"api/goals/active/time/edit").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task DeleteTime(ActiveGoalTimeData time) {
		GoalTimeDeleteData request = new(Id, time.Id, _userId);

		var url = NavManager.ToAbsoluteUri($"api/goals/active/time/delete").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}
}
