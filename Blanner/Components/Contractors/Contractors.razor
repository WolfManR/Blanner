@page "/contractors"

@inject HttpClient Http
@inject NavigationManager NavManager
@inject ILocalization Loc

<PageTitle>@Loc.ContractorsPageTitle</PageTitle>

<h3>@Loc.ContractorsPageTitle</h3>

<div class="w-25">
	<EditForm FormName="ContractorCreateForm" Model="ContractorCreateModel" OnValidSubmit="CreateContractor">
		<div class="input-group mb-3">
			<label class="input-group-text">@Loc.NameInputLabel</label>
			<InputText class="form-control" @bind-Value="ContractorCreateModel.Name" aria-describedby="contractorCreateBtn" />
			<button class="btn btn-primary" id="contractorCreateBtn">@Loc.BtnAdd</button>
		</div>
	</EditForm>
</div>

<div class="d-flex flex-wrap">
	@foreach (var item in _contractors) {
		<div class="card m-2">
			<div class="card-header d-flex gap-2 align-items-baseline">
				@if (!item.IsOnEdit) {
					<div @onclick="() => item.IsOnEdit = true">@item.Name</div>
				}
				@if (item.IsOnEdit) {
					<div>
						<EditForm FormName="ContractorEditForm" Model="item" OnValidSubmit="() => Save(item)">
							<label>
								@Loc.NameInputLabel
								<InputText @bind-Value="item.Name" />
							</label>
						</EditForm>
					</div>
				}
				<button class="btn btn-danger" @onclick="() => Delete(item)"><i class="bi bi-trash3"></i></button>
			</div>
		</div>
	}
</div>

@code {
	private List<ContractorVM> _contractors = new();
	private NameFormModel ContractorCreateModel { get; set; } = new();

	protected override async Task OnInitializedAsync() {
		var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
		var response = await Http.GetFromJsonAsync<List<Contractor>>(uri);
		_contractors = (response ?? new()).Select(x=>new ContractorVM().Set(x)).ToList();
	}

	private async Task CreateContractor() {
		var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
		var response = await Http.PostAsJsonAsync(uri, new ContractorCreateRequest(ContractorCreateModel.Name, DateTimeOffset.Now));
		response.EnsureSuccessStatusCode();
		var data = await response.Content.ReadFromJsonAsync<Contractor>();
		if (data is null) return;

		_contractors.Insert(0, new ContractorVM().Set(data));
	}

	private async Task Save(ContractorVM contractor) {
		var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
		var response = await Http.PutAsJsonAsync(uri, new ContractorEditRequest(contractor.Id, contractor.Name, DateTimeOffset.Now));
		response.EnsureSuccessStatusCode();
		var data = await response.Content.ReadFromJsonAsync<Contractor>();
		if (data is null) return;

		contractor.Set(data);
		contractor.IsOnEdit = false;
	}

	private async Task Delete(ContractorVM contractor) {
		var uri = NavManager.ToAbsoluteUri($"api/contractors/{contractor.Id}").AbsoluteUri;
		var response = await Http.DeleteAsync(uri);
		response.EnsureSuccessStatusCode();
		var data = await response.Content.ReadFromJsonAsync<Contractor>();
		if (data is null) return;
		_contractors.Remove(contractor);
		StateHasChanged();
	}

	class ContractorVM {
		public int Id { get; private set; }
		public string Name { get; set; } = string.Empty;
		public bool IsOnEdit { get; set; }

		public ContractorVM Set(Contractor data) {
			Id = data.Id;
			Name = data.Name;

			return this;
		}

		public void Clear() {
			Id = 0;
			Name = string.Empty;
		}
	}
}
