@inject IJSRuntime JS
@inject ILocalization Loc

@implements IDialogContentComponent<TimeRangeDialogParameters>

<FluentDialogHeader>
	<div class="d-flex">
		<h3>Set time range</h3>
		<FluentSpacer />
		<h3>@Time</h3>
	</div>
</FluentDialogHeader>

<FluentDialogBody>
	<EditForm Model="this" FormName="TimeRangePicker">
		<div class="d-flex justify-content-between mb-2">
			<FluentDatePicker @bind-Value="@Start" Immediate/>
			<span class="ml-4 mr-4 fs-3 lh-2">-</span>
			<FluentDatePicker @bind-Value="@End" Immediate/>
		</div>

		<div class="d-flex justify-content-between w-100">
			<FluentTimePicker @bind-Value="@Start" Immediate DisplayName="StartTime"/>
			<div>
				<FluentTimePicker Value="@(new DateTime(Time.Ticks))" ValueChanged="@((DateTime? v) => Time = v!.Value.TimeOfDay)" Immediate DisplayName="Time" />
			</div>
			<FluentTimePicker @bind-Value="@End" Immediate DisplayName="EndTime" />
		</div>
	</EditForm>
</FluentDialogBody>

<FluentDialogFooter>
	<FluentButton Appearance="Appearance.Accent" OnClick="SubmitResult">@Loc.BtnOk</FluentButton>
	<FluentSpacer/>
</FluentDialogFooter>

@code {
	private DateTime? _start;
	private DateTime? _end;
	private TimeSpan _currentTimeRange;

	private DateTime? Start { 
		get => _start;
		set {
			_start = value;
			if (_start.HasValue) _start = _start.Value.Normalize();
			if (_start > _end) _end = _start;
			UpdateTimeRange();
		}}
	private DateTime? End {
		get => _end;
		set {
			_end = value;
			if (_end.HasValue) _end = _end.Value.Normalize();
			if (_end < _start) _start = _end;
			UpdateTimeRange();
		}}
	private TimeSpan Time { get => _currentTimeRange; set => _end = Start!.Value + value; }

	[CascadingParameter]
	public FluentDialog? Dialog { get; set; }

	[Parameter]
	public TimeRangeDialogParameters Content { get; set; } = default!;

	protected override void OnParametersSet() {
		var range = Content.TimeRange;

		if(range is not null) {
			Start = range.Start.DateTime;
			End = range.End.DateTime;
		}
		UpdateTimeRange();

		base.OnParametersSet();
	}

	private async Task SubmitResult(MouseEventArgs e) {
		if (!Start.HasValue || !End.HasValue) return;

		var startDate = DateTime.SpecifyKind(Start.Value, DateTimeKind.Local);
		var endDate = DateTime.SpecifyKind(End.Value, DateTimeKind.Local);

		if (startDate > endDate) return;

		await Dialog!.CloseAsync(new TimeRange() { Start = startDate, End = endDate });
	}

	private void UpdateTimeRange() {
		if (!Start.HasValue || !End.HasValue) return;

		try {
			var startDate = DateTime.SpecifyKind(Start.Value, DateTimeKind.Local);
			var endDate = DateTime.SpecifyKind(End.Value, DateTimeKind.Local);
			_currentTimeRange = endDate - startDate;
		}
		catch {
			// ignore
		}
	}
}
