@inject IJSRuntime JS
@inject ILocalization Loc


<dialog @ref="_dialogRef" class="time-dialog w-25" id="GoalEditorDialog" @onclose="CloseDialog" @oncancel="CloseDialog">
	<EditForm Model="this">
		<div class="d-flex justify-content-between mb-2">
			<InputDate @bind-Value="StartDate" DisplayName="Start" />
			<span class="ml-4 mr-4">-</span>
			<InputDate @bind-Value="EndDate" DisplayName="End" />
		</div>
		<div class="d-flex">
			<div class="d-flex flex-row justify-content-start">
				<InputNumber class="w-50" @bind-Value="StartHours" DisplayName="Hours" />
				<InputNumber class="w-50" @bind-Value="StartMinutes" DisplayName="Minutes" />
			</div>
			<div class="w-25"></div>
			<div class="d-flex flex-row justify-content-end">
				<InputNumber class="w-50" @bind-Value="EndHours" DisplayName="Hours" />
				<InputNumber class="w-50" @bind-Value="EndMinutes" DisplayName="Minutes" />
			</div>
		</div>
		<div class="d-flex mt-4">

			<form method="dialog">
				<button class="btn btn-primary" @onclick="SubmitResult">@Loc.BtnOk</button>
				<button class="btn btn-close"></button>
			</form>

			<div class="me-4">@CurrentTimeRange.ToString()</div>
		</div>
	</EditForm>
</dialog>

@code {
	private DateTime _startDate;
	private int _startHours;
	private int _startMinutes;
	private DateTime _endDate;
	private int _endHours;
	private int _endMinutes;


	private ElementReference? _dialogRef;
	[Parameter]
	public EventCallback<TimeRange?> DialogCompletion { get; set; }

	private DateTime StartDate {
		get => _startDate; set {
			_startDate = value;
			UpdateTimeRange();
		}
	}
	private int StartHours {
		get => _startHours; set {
			SetNewValue(value, 0, 23, ref _startHours, () => StartDate, (v) => StartDate = v);
			UpdateTimeRange();
		}
	}
	private int StartMinutes {
		get => _startMinutes; set {
			SetNewValue(value, 0, 59, ref _startMinutes, (v) => StartHours += v);
			UpdateTimeRange();
		}
	}
	private DateTime EndDate {
		get => _endDate; set {
			_endDate = value;
			UpdateTimeRange();
		}
	}
	private int EndHours {
		get => _endHours; set {
			SetNewValue(value, 0, 23, ref _endHours, () => EndDate, (v) => EndDate = v);
			UpdateTimeRange();
		}
	}
	private int EndMinutes {
		get => _endMinutes; set {
			SetNewValue(value, 0, 59, ref _endMinutes, (v) => EndHours += v);
			UpdateTimeRange();
		}
	}

	private TimeSpan CurrentTimeRange;
	private bool _valueSubmited;


	public async ValueTask OpenDialog(TimeRange? range = default) {
		if (!_dialogRef.HasValue) return;

		if (range is not null) {
			StartDate = range.Start.Date;
			StartHours = range.Start.Hour;
			StartMinutes = range.Start.Minute;
			EndDate = range.End.Date;
			EndHours = range.End.Hour;
			EndMinutes = range.End.Minute;
		}
		UpdateTimeRange();
		await JS.InvokeVoidAsync("ShowDialog", _dialogRef.Value);
	}


	private async Task SubmitResult(MouseEventArgs e) {
		_valueSubmited = true;
		if (!_dialogRef.HasValue) return;
		if (!DialogCompletion.HasDelegate) return;

		var startDate = DateTime.SpecifyKind(StartDate.AddHours(StartHours).AddMinutes(StartMinutes), DateTimeKind.Local);
		var endDate = DateTime.SpecifyKind(EndDate.AddHours(EndHours).AddMinutes(EndMinutes), DateTimeKind.Local);

		if (startDate > endDate) return;

		await DialogCompletion.InvokeAsync(new() { Start = startDate, End = endDate });
	}

	private async Task CloseDialog(EventArgs e) {
		if (_valueSubmited) return;
		_valueSubmited = false;
		if (!_dialogRef.HasValue) return;
		if (DialogCompletion.HasDelegate)
			await DialogCompletion.InvokeAsync();
	}

	private void SetNewValue(int value, int min, int max, ref int field, Action<int> greaterFieldSet) {
		if (value >= max) {
			greaterFieldSet.Invoke(1);
			field = min;
			return;
		}
		if (value <= min) {
			greaterFieldSet.Invoke(-1);
			field = max;
			return;
		}
		field = value;
	}
	private void SetNewValue(int value, int min, int max, ref int field, Func<DateTime> greaterFieldGet, Action<DateTime> greaterFieldSet) {
		if (value >= max) {
			greaterFieldSet.Invoke(greaterFieldGet.Invoke().AddDays(1));
			field = min;
			return;
		}
		if (value <= min) {
			greaterFieldSet.Invoke(greaterFieldGet.Invoke().AddDays(-1));
			field = max;
			return;
		}
		field = value;
	}

	private void UpdateTimeRange() {
		try {
			var startDate = DateTime.SpecifyKind(StartDate.AddHours(StartHours).AddMinutes(StartMinutes), DateTimeKind.Local);
			var endDate = DateTime.SpecifyKind(EndDate.AddHours(EndHours).AddMinutes(EndMinutes), DateTimeKind.Local);
			CurrentTimeRange = endDate - startDate;
		}
		catch { }
	}
}
