@page "/Admin/Jobs/{Id:int}"

@inject NavigationManager NavManager
@inject HttpClient Http
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm FormName="AdminJobEditForm" Model="this">
	<DataAnnotationsValidator />
	<FluentValidationSummary />

	<FluentStack Orientation="Orientation.Vertical">
		<input @bind-value="@Id" hidden />

		<div>
			<FluentTextField Name="Name" @bind-Value="Name" Label="Name" Style="width: 40rem" Required />
		</div>

		<div class="mb-3">
			<label>
				Contractor
				<InputSelect class="form-select" @bind-Value="Contractor" DisplayName="Contractor">
					<option value="0">Empty</option>
					@foreach (var item in _contractors) {
						<option value="@item.Id">@item.Name</option>
					}
				</InputSelect>
			</label>
		</div>

		<div>@User</div>

		<div>@Start.GetValueOrDefault().ToString(UserSettings.DetailedDateTimeFormatterValue())</div>

		<div>@End.GetValueOrDefault().ToString(UserSettings.DetailedDateTimeFormatterValue())</div>

		<InputTextArea class="form-control" @bind-Value="Comment" style="height:40vh;" DisplayName="Comment" />

		<FluentCheckbox @bind-Value="Saved"/>
	</FluentStack>
</EditForm>


<div class="mt-2 mb-1">
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Id</th>
				<th>From</th>
				<th>To</th>
				<th>Time</th>
				<th>
					@* <div>
						<button class="btn-lg" @onclick="AddTimeActiveGoal" disabled="@(Id == 0)"><i class="bi bi-plus-square-fill"></i></button>
					</div> *@
				</th>
			</tr>
		</thead>

		<tbody>
			@foreach (var item in Time) {
				<tr>
					<td>@item.Id</td>
					<td>@item.Start.ToString("t")</td>
					<td>@item.End.ToString("t")</td>
					<td>
						@* @if (item.Id != ActiveTimerId) {
							<div>
								<button class="btn btn-danger" @onclick="() => DeleteTime(item)"><i class="bi bi-trash3"></i></button>
								<button class="btn btn-info" @onclick="() => EditTimeActiveGoal(item)"><i class="bi bi-pencil-square"></i></button>
							</div>
						} *@
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<FluentStack>
	<FluentButton OnClick="SaveAndClose">Save and Close</FluentButton>
	<FluentButton OnClick="Save">Save</FluentButton>
	<FluentButton OnClick="GoBack">Go Back</FluentButton>
</FluentStack>

@code {
	private List<Contractor> _contractors = [];
	private List<UserSelectListData> _users = [];
	private string _userId = "";
	private UserSettings? UserSettings { get; set; }

	private int? _contractor;
	private string? _name;
	private string? _comment;
	private bool _saved;

	[Parameter]
	public int Id { get; set; }

	private string? User { get; set; }
	private DateOnly Date { get; set; }
	private DateTime? Start { get; set; }
	private DateTime? End { get; set; }


	private int? Contractor { get; set; }
	private string? Name { get; set; }
	private string? Comment { get; set; }
	private bool Saved { get; set; }

	private List<JobDetailsTimeData> Time { get; set; } = [];

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";


		var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
		_contractors = await Http.GetFromJsonAsync<List<Contractor>>(uri) ?? new();

		uri = NavManager.ToAbsoluteUri("api/users").AbsoluteUri;
		_users = await Http.GetFromJsonAsync<List<UserSelectListData>>(uri) ?? new();
	}

	protected override async Task OnParametersSetAsync() {
		if (Id == 0) return;
		var url = NavManager.ToAbsoluteUri($"api/jobs/{Id}").AbsoluteUri;

		var entity = await Http.GetFromJsonAsync<JobDetailsData>(url);
		if (entity is null) return;

		User = entity.User?.UserName;
		Date = entity.Date;
		Start = entity.Start.LocalDateTime;
		End = entity.End.LocalDateTime;

		_contractor = Contractor = entity.Contractor?.Id;
		_name = Name = entity.Name;
		_comment = Comment = entity.Comment;
		_saved = Saved = entity.Saved;

		Time = entity.Time;

		StateHasChanged();
	}

	private async Task Save() {
		var response = await SaveJobData();
	}

	private async Task SaveAndClose() {
		var response = await SaveJobData();

		if (response?.IsSuccessStatusCode is true) GoBack();
	}

	private async Task<HttpResponseMessage?> SaveJobData() {
		if (Name is null) return null;
		if (_userId.NullOrEmpty()) return null;

		string url;

		if(Saved != _saved) {
			JobSavedChangedData requestSavedChanged = new(Id, _userId, Saved);

			url = NavManager.ToAbsoluteUri("api/jobs/update-status/saved").AbsoluteUri;

			await Http.PostAsJsonAsync(url, requestSavedChanged);
		}

		JobHeaderSaveData request = new(Id, _userId, Name, Contractor, Comment ?? "");

		url = NavManager.ToAbsoluteUri("api/jobs/save").AbsoluteUri;

		return await Http.PostAsJsonAsync(url, request);
	}

	private void GoBack() {
		NavManager.NavigateTo("/Admin/Jobs");
	}
}
