@page "/Admin/Jobs"

@inject ApplicationDbContext DbContext
@inject NavigationManager NavManager
@inject HttpClient Http

<FluentGrid Justify="JustifyContent.SpaceBetween">
	<FluentGridItem Style="min-width: 200px;">
		<FluentLabel Typo="Typography.PageTitle">Jobs</FluentLabel>
	</FluentGridItem>
	<FluentGridItem Justify="JustifyContent.FlexEnd" Gap="10px">
		<FluentAnchor Appearance="Appearance.Accent" Href="/Admin/Jobs/0">New</FluentAnchor>
	</FluentGridItem>
</FluentGrid>

<FluentDataGrid TGridItem="JobListView" Pagination="_pagination" ItemsProvider="_itemsProvider"
	GridTemplateColumns=".5fr 1fr 1fr 1fr .8fr 2fr 1fr 1fr .5fr .6fr">
	<PropertyColumn Property="@(p => p.Id)" Title="№" />
	<PropertyColumn Property="@(p => p.Date)" Format="dd.MM.yyyy" Sortable="true" />
	<PropertyColumn Property="@(p => p.Start)" Format="dd.MM.yyyy HH:mm" Sortable="true" />
	<PropertyColumn Property="@(p => p.End)" Format="dd.MM.yyyy HH:mm" Sortable="true" />
	<PropertyColumn Property="@(p => p.ElapsedTime)" Format="@(UserSettings.TimeFormatterValue())" Title="Elapsed time" Sortable="true" />
	<PropertyColumn Property="@(p => p.Name)" Sortable="true" />
	<PropertyColumn Property="@(p => p.ContractorName)" Title="Contractor" Sortable="true" />
	<PropertyColumn Property="@(p => p.UserName)" Title="User" Sortable="true" />
	<TemplateColumn Title="Saved">
		@if (context.Saved) {
			<FluentButton IconEnd="@(new Icons.Regular.Size16.Archive())" />
		}
	</TemplateColumn>
	<TemplateColumn Title="Actions">
		<FluentAnchor IconEnd="@(new Icons.Regular.Size16.Edit())" Href="@($"/Admin/Jobs/{context.Id}")" />
		@* <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Delete(context.Id))" /> *@
	</TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="_pagination"/>

@code {
	class JobListView {
		public int Id { get; set; }
		public required string Name { get; set; }
		public DateOnly Date { get; set; }
		public string? ContractorName { get; set; }
		public string? UserName { get; set; }
		public required string UserId { get; set; }
		public DateTimeOffset Start { get; set; }
		public DateTimeOffset End { get; set; }
		public TimeSpan ElapsedTime { get; set; }
		public bool Saved { get; set; }
	}

	GridItemsProvider<JobListView> _itemsProvider = default!;
	PaginationState _pagination = new(){ItemsPerPage = 10};
	public UserSettings? UserSettings { get; set; }

	protected override Task OnInitializedAsync() {
		_itemsProvider = async req =>
		{
			var data = await DbContext.Jobs.AsNoTracking()
				.Include(x => x.User)
				.Include(x => x.Time)
				.Include(x => x.Contractor)
				.Select(x => new JobListView {
						Id = x.Id,
						Date = x.Date,
						Start = x.Start,
						End = x.End,
						UserId = x.User != null ? x.User.Id : "",
						UserName = x.User != null ? x.User.UserName : "",
						ContractorName = x.Contractor != null ? x.Contractor.Name : "",
						Name = x.Name,
						Saved = x.Saved,
						ElapsedTime = x.ElapsedTime
				})
				.Skip(req.StartIndex)
				.Take(req.Count ?? 10)
				.ToListAsync(req.CancellationToken);

			return GridItemsProviderResult.From(data, await DbContext.Jobs.AsNoTracking().CountAsync(req.CancellationToken));
		};
		return Task.CompletedTask;
	}

	// private async Task Delete(int Id) {
	// 	JobDeleteData request = new(Id);

	// 	var url = NavManager.ToAbsoluteUri("api/jobs/delete").AbsoluteUri;

	// 	var response = await Http.PostAsJsonAsync(url, request);

	// 	NavManager.Refresh(true);
	// }

}
