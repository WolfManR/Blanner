@implements IDialogContentComponent

@inject ILogger<SiteSettingsPanel> Logger
@inject ILocalizationManager LocalizationManager
@inject ILocalization Loc

<div>
    <FluentDesignTheme @ref=_theme
                       @bind-Mode="@Mode"
                       @bind-OfficeColor="@OfficeColor"
                       StorageName="theme" />

    <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
        <FluentSelect Label="Theme"
                      Width="100%"
                      Style="margin-bottom: 30px;"
                      Items="@AllModes"
                      @bind-SelectedOption="@Mode" />

        <FluentSelect Label="Color"
                      Style="margin-bottom: 30px;"
                      Width="100%"
                      Items="@(OfficeColorUtilities.AllColors.Cast<OfficeColor?>())"
                      Height="200px"
                      @bind-SelectedOption="@OfficeColor">
            <OptionTemplate>
                <FluentStack>
                    <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                                Color="Color.Custom"
                                CustomColor="@GetCustomColor(@context)" />
                    <FluentLabel>@context</FluentLabel>
                </FluentStack>
            </OptionTemplate>
        </FluentSelect>

        <FluentDivider Style="width: 100%; margin: 1rem 0" />

        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentButton OnClick="@ResetSiteAsync">Reset settings</FluentButton>
        </FluentStack>

        <FluentDivider Style="width: 100%; margin: 1rem 0" />

        <FluentSelect Appearance="Appearance.Stealth"
                      TOption="string"
                      Items="@LocalizationManager.Localizations"
                      @bind-Value="@LocalizationManager.CurrentLocalization">
        </FluentSelect>

        <FluentDivider Style="width: 100%; margin: 1rem 0" />

        <AuthorizeView>
			<Authorized>
                <FluentAnchor Icon="@(new Icons.Regular.Size20.ShieldPerson())" Href="Admin/Manage">@Loc.AuthMenuAdminDashboard</FluentAnchor>
            </Authorized>
        </AuthorizeView>

        <FluentLabel Class="mt-1" Typo="Typography.H5">@_status</FluentLabel>
    </FluentStack>
</div>

@code {
    private string? _status;
    private FluentDesignTheme? _theme;

    public DesignThemeModes Mode { get; set; }
    public OfficeColor? OfficeColor { get; set; }

    private void ResetSiteAsync() {
        var msg = "Site settings reset!";

        _theme?.ClearLocalStorageAsync();

        Logger.LogInformation(msg);
        _status = msg;

        OfficeColor = OfficeColorUtilities.GetRandom();
        Mode = DesignThemeModes.System;
    }

    private static string? GetCustomColor(OfficeColor? color) {
        return color switch {
            null => OfficeColorUtilities.GetRandom(true).ToAttributeValue(),
            Microsoft.FluentUI.AspNetCore.Components.OfficeColor.Default => "#036ac4",
            _ => color.ToAttributeValue(),
        };

    }
    private static IEnumerable<DesignThemeModes> AllModes => Enum.GetValues<DesignThemeModes>();

    private static IEnumerable<OfficeColor?> AllOfficeColors {
        get {
            return Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?) i);
        }
    }
}
