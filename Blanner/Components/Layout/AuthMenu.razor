@implements IDisposable

@inject NavigationManager NavigationManager
@inject ILocalization Loc
@inject UserInfo UserInfo
@inject SignInManager<User> SignInManager


<FluentStack HorizontalAlignment="@HorizontalAlignment.End"
			 VerticalAlignment="@VerticalAlignment.Center"
			 HorizontalGap="12"
			 Style="height: 48px; padding-inline-end: 10px; ">

	<AuthorizeView>
		<Authorized>
			<form>
				<input type="hidden" name="ReturnUrl" value="@LogoutForm.ReturnUrl" />
				<FluentButton Type="ButtonType.Submit" Action="Account/Logout" Method="post">@Loc.AuthMenuBtnLogout</FluentButton>
				<AntiforgeryToken />
			</form>
			<FluentProfileMenu Initials="@(string.Empty + UserEmail.ToUpper()[0])"
							   TopCorner
							   ButtonSize="42px"
							   Style="--fluent-profile-menu-hover: var(--neutral-stroke-focus); padding: 4px;">
				<HeaderTemplate>
					<FluentStack Orientation="Orientation.Horizontal">

						<FluentLabel Typo="@Typography.Header">@UserEmail</FluentLabel>
						<FluentSpacer />
					</FluentStack>
				</HeaderTemplate>
				<ChildContent>
					<div style="width: 250px; height: 80px">
						<FluentAnchor Href="Account/Manage">Manage</FluentAnchor>
					</div>
				</ChildContent>
				<FooterTemplate>
					<FluentStack>

						<FluentSpacer />
						<FluentAnchor Appearance="@Appearance.Hypertext"
									  Href="https://microsoft.com"
									  Target="_blank">About</FluentAnchor>
					</FluentStack>
				</FooterTemplate>
			</FluentProfileMenu>

		</Authorized>

		<NotAuthorized>
			<FluentAnchor Href="Account/Register">@Loc.AuthMenuBtnRegister</FluentAnchor>
			<FluentAnchor Href="Account/Login">@Loc.AuthMenuBtnLogin</FluentAnchor>
		</NotAuthorized>
	</AuthorizeView>
</FluentStack>

@code {
	[SupplyParameterFromForm]
	private LogoutFormModel LogoutForm { get; set; } = new();

	private string UserEmail { get; set; } = string.Empty;

	protected override void OnInitialized() {
		LogoutForm = new();
		LogoutForm.ReturnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		NavigationManager.LocationChanged += OnLocationChanged;
	}

	protected override async Task OnInitializedAsync() {

		UserEmail = await UserInfo.Email();
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
		LogoutForm.ReturnUrl = NavigationManager.ToBaseRelativePath(e.Location);
		StateHasChanged();
	}

	public void Dispose() {
		NavigationManager.LocationChanged -= OnLocationChanged;
	}

	private class LogoutFormModel {
		public string? ReturnUrl { get; set; }
	}
}
