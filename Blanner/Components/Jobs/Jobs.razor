@page "/jobs"

@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalization Loc

@attribute [Authorize]

@implements IAsyncDisposable

<PageTitle>@Loc.JobsPageTitle</PageTitle>

<div>
	<div class="row sticky-top w-50 justify-content-start">
		<EditForm FormName="JobsFilter" Model="@FilterForm">

			<FluentDatePicker Value="@FilterForm.Start" ValueChanged="OnFilterValueStartChanged" />
			<span class="col-auto"></span>
			<FluentDatePicker Value="@FilterForm.End" ValueChanged="OnFilterValueEndChanged" />
		</EditForm>
	</div>

	<FluentSplitter Orientation="Orientation.Horizontal" Class="h-100" BarSize="6" Panel1MinSize="30%" Panel2MinSize="20%" Collapsed="@(Selected is null)">

		<Panel1>
			<div class="mt-2 me-3" style="height: 88dvh; overflow-y: auto;">
				@foreach (var group in JobHeaders.GroupBy(x => x.Date).OrderByDescending(x => x.Key)) {
					<FluentCard Class="mb-3" MinimalStyle Height="fit-content">
						<div>
							<div class="row">
								<FluentLabel Class="col-9 fw-bold">@group.Key.ToString("D")</FluentLabel>
								<FluentLabel Class="col-auto fw-bold">@group.Select(x => x.ElapsedTime).Aggregate((cum, t) => cum + t).ToString(UserSettings.TimeFormatterValue())</FluentLabel>
							</div>
						</div>

						<div>
							@foreach (var contractorGroup in group.GroupBy(x => new Value<Contractor, int>(x.Contractor))) {
								<div>
									<FluentLabel Class="col-auto mb-2 mt-1" Typo="Typography.H3">@(contractorGroup.Key.StoredValue?.Name ?? Loc.ContractorNoneName)</FluentLabel>

									@foreach (var item in contractorGroup) {
										<ContextMenuTrigger MenuId="JobContextMenu" Data="@item">
											<div class="me-2 border border-2 @(item == Selected ? "border-primary border-opacity-25" : "border-dark border-opacity-10") p-2 rounded-2 m-1" @onclick="() => Select(item)">
												<div class="row align-items-center">
													<div class="col-auto row-cols-2">
														<FluentButton Class="col me-1" IconStart="@(item.Saved ? new Icons.Filled.Size24.Database() : new Icons.Regular.Size24.Database())" OnClick="() => SwitchStatusSaved(item)" />

														@if (item is { Comment.Length: > 0 } or { Changes.Count: > 0 }) {
															<i class="col bi bi-pencil fs-5" style="vertical-align: -.4em"></i>
														}
													</div>

													<FluentLabel Class="col-7 mb-0" Typo="Typography.H4">@item.Name</FluentLabel>
													<FluentLabel Class="col-1">@item.ElapsedTime.ToString(UserSettings.TimeFormatterValue())</FluentLabel>
													<FluentLabel Class="col-md-auto"><span>@item.Start.ToString(UserSettings.DateTimeFormatterValue())</span> - <span>@item.End.ToString(UserSettings.DateTimeFormatterValue())</span></FluentLabel>
												</div>
											</div>
										</ContextMenuTrigger>
									}
								</div>
							}
						</div>
					</FluentCard>
				}
			</div>
		</Panel1>

		<Panel2>
			<div class="m-2" style="height: 88dvh; overflow-y: auto;">
				<FluentCard>
					<div class="mb-4 d-flex justify-content-between" style="height: 25px;">
						<FluentButton IconStart="@(new Icons.Regular.Size24.Dismiss())" OnClick="() => {Selected = null;}"></FluentButton>

						@if (Selected?.Comment is { Length: > 0 } && ActiveTabId == "tab-1") {
							<CopyToClipboard TextToCopy="@Selected.Comment" />
						}
					</div>

					<h4>@Selected?.Name</h4>

					<FluentTabs @bind-ActiveTabId="@ActiveTabId">
						<FluentTab Id="tab-1">
							<Header>
								Comment
							</Header>
							<Content>
								@if (Selected?.Comment is { Length: > 0 }) {
									<div class="mt-2 p-2" style="height:75dvh;overflow-y:auto;">
										<p>@((MarkupString) @Selected.Comment.Replace("\n", "<br/>"))</p>
									</div>
								}
							</Content>
						</FluentTab>
						<FluentTab Id="tab-2">
							<Header>
								Changes @Selected?.Changes.Count
							</Header>
							<Content>
								<div class="mt-2 p-2" style="height:75dvh;overflow-y:auto;">
									@if (Selected?.Changes is { Count: > 0 }) {
										@foreach (var change in Selected.Changes) {
											<FluentCard Class="mb-3">
												<div>
													<div class="row">
														<div class="col-auto">
															<FluentButton IconStart="@(change.Saved ? new Icons.Filled.Size24.Database() : new Icons.Regular.Size24.Database())" />
														</div>
														<FluentLabel Class="col-2">@change.ElapsedTime.ToString(UserSettings.TimeFormatterValue())</FluentLabel>
														<FluentLabel Class="col-md-auto"><span>@change.Start.ToString(UserSettings.DateTimeFormatterValue())</span> - <span>@change.End.ToString(UserSettings.DateTimeFormatterValue())</span></FluentLabel>
														<div class="col-auto">
														@if (change.Comment is { Length: > 0 }) {
															<CopyToClipboard TextToCopy="@change.Comment" />
														}
														</div>
													</div>
												</div>
												<div>
													<div>
														@if (change.Comment is { Length: > 0 }) {
															<div class="mt-2 p-2">
																<p>@((MarkupString) @change.Comment.Replace("\n", "<br/>"))</p>
															</div>
														}
													</div>
												</div>
											</FluentCard>
										}
									}
								</div>
							</Content>
							</FluentTab>
					</FluentTabs>
				</FluentCard>
			</div>
		</Panel2>

	</FluentSplitter>
</div>

<JobsContextMenu/>

@code {
	private JobsClient? JobsClient { get; set; }
	private string _userId = "";
	private List<JobHeaderData> JobHeaders { get; set; } = [];
	private JobHeaderData? Selected { get; set; }

	private string ActiveTabId { get; set; } = "tab-1";

	public UserSettings? UserSettings { get; set; }

	[SupplyParameterFromForm]
	private JobsFilterForm FilterForm { get; set; } = JobsFilterForm.Create();

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";

		await LoadJobs();

		JobsClient = new(NavManager);

		JobsClient.OnJobsBuilded += OnJobsBuilded;
		JobsClient.OnJobStatusSavedEdited += OnJobStatusSavedEdited;

		await JobsClient.Start();
	}

	private async Task LoadJobs() {
		var url = NavManager.JobsApiUri();

		var response = await Http.PostAsJsonAsync(url, new JobsListData(_userId, DateOnly.FromDateTime(FilterForm.Start), DateOnly.FromDateTime(FilterForm.End)));
		if (response.IsSuccessStatusCode) {
			JobHeaders = (await response.Content.ReadFromJsonAsync<List<JobHeaderData>>()) ?? [];
		}
	}

	private void Select(JobHeaderData item) {
		if (item is { Comment.Length: > 0 } or { Changes.Count: > 0 })
		{
			Selected = item;
		}
	}

	private async Task SwitchStatusSaved(JobHeaderData item) {
		JobSavedChangedData requestSavedChanged = new(item.Id, _userId, !item.Saved);

		var url = NavManager.ToAbsoluteUri("api/jobs/update-status/saved").AbsoluteUri;

		await Http.PostAsJsonAsync(url, requestSavedChanged);
	}

	private async Task OnFilterValueStartChanged(DateTime? date) {
		FilterForm.Start = date.HasValue ? date.Value : DateTime.MinValue;
		await LoadJobs();
	}

	private async Task OnFilterValueEndChanged(DateTime? date) {
		FilterForm.End = date.HasValue ? date.Value : DateTime.MinValue;
		await LoadJobs();
	}

	// private async Task CreateGoal(EditContext editContext) {
	// 	if (_userId.NullOrEmpty()) return;
	// 	GoalCreationData request = new(NewGoal.Name, _userId);

	// 	var url = NavManager.ToAbsoluteUri("api/goals/save").AbsoluteUri;

	// 	var response = await Http.PostAsJsonAsync(url, request);
	// }

	private async Task OnJobsBuilded(string userId) {
		if (userId != _userId) return;
		await LoadJobs();

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnJobStatusSavedEdited(int jobId, string userId, bool status, int[] updatedChanges) {
		if (JobHeaders.Find(x => x.Id == jobId) is not { } job) return;

		job.Saved = status;
		job.Changes.Where(x => updatedChanges.Contains(x.Id)).Change(x => x.Saved = status);

		await InvokeAsync(StateHasChanged);
	}

	public async ValueTask DisposeAsync() {
		if (JobsClient is not null) await JobsClient.DisposeAsync();
	}

	class JobsFilterForm {
		public DateTime Start { get; set; }
		public DateTime End { get; set; }

		public static JobsFilterForm Create() {
			var today = DateTime.Now;

			JobsFilterForm form = new() {
					Start = today.AddDays(-7).Date,
					End = today.Date.AddDays(1)
				};
			return form;
		}
	}

	class JobDaySection {
		public DateOnly Date { get; set; }
		public List<JobHeaderData> Jobs { get; set; } = [];
		public Dictionary<Value<int, Contractor>, List<JobHeaderData>> Groups { get; set; } = [];
		public JobHeaderData? Selected { get; set; }
	}
}
