@page "/jobs"

@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalization Loc

@attribute [Authorize]

<PageTitle>@Loc.JobsPageTitle</PageTitle>

<div>
	<div class="row sticky-top w-50 justify-content-start">
		<input class="form-control col" type="date" value="@FilterForm.Start.ToString("O")" @onchange="OnFilterValueStartChanged" />
		<span class="col-auto"></span>
		<input class="form-control col" type="date" value="@FilterForm.End.ToString("O")" @onchange="OnFilterValueEndChanged" />
	</div>

	<div class="mt-2">
		@foreach (var group in _data.GroupBy(x => x.Start.Date).OrderByDescending(x => x.Key)) {
			<div class="card mb-3">
				<div class="card-header">
					<div class="row">
						<span class="col-6 fw-bold">@group.Key.ToString("D")</span>
						<span class="col-1 fw-bold">@group.Select(x => x.TotalTime).Aggregate((cum, t) => cum + t).ToString(UserSettings.TimeFormatterValue())</span>
					</div>
				</div>
				<div class="card-body">
					@foreach (var contractorGroup in group.GroupBy(x => new Value<Contractor, int>(x.Contractor))) {
						<div>
							<h3 class="col-3 mb-2 mt-1">@(contractorGroup.Key.StoredValue?.Name ?? Loc.ContractorNoneName)</h3>

							@foreach (var item in contractorGroup) {
								<div class="me-2 bg-dark bg-opacity-10 p-2 rounded-2 m-1">
									<div class="row align-items-baseline">
										<h5 class="col-6 fs-4">@item.Name</h5>
										<span class="col-1">@item.TotalTime.ToString(UserSettings.TimeFormatterValue())</span>
										<span class="col-1"><span>@item.Start.ToString(UserSettings.DateTimeFormatterValue())</span> - <span>@item.End.ToString(UserSettings.DateTimeFormatterValue())</span></span>
										<div class="col-1">
											<input class="form-check-input" type="checkbox" value="@item.Marked" />
										</div>
									</div>

									@if (item.Comment is { Length: > 0 }) {
										<div class="me-3 mt-2 bg-white p-2 rounded-1">
											<p>@((MarkupString) @item.Comment.Replace("\n", "<br/>"))</p>
										</div>
									}
									
								</div>
							}
						</div>
					}
				</div>
			</div>
		}
	</div>
</div>

@code {
	private HubConnection? _hubConnection;

	private string _userId = "";
	private List<JobHeaderData> _data = new();
	public UserSettings? UserSettings { get; set; }

	[SupplyParameterFromForm]
	private JobsFilterForm FilterForm { get; set; } = JobsFilterForm.Create();

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";

		await LoadJobs();

		_hubConnection = new HubConnectionBuilder().WithUrl(NavManager.GoalsHubUri()).Build();

		_hubConnection.On<string>(nameof(IGoalsHub.JobsBuilded), OnJobsBuilded);

		await _hubConnection.StartAsync();
	}

	private async Task LoadJobs() {
		var url = NavManager.JobsApiUri();

		var response = await Http.PostAsJsonAsync(url, new JobsListData(_userId, FilterForm.Start, FilterForm.End));
		if (response.IsSuccessStatusCode) {
			_data = (await response.Content.ReadFromJsonAsync<List<JobHeaderData>>()) ?? [];
		}
	}

	private async Task OnFilterValueStartChanged(ChangeEventArgs e) {
		FilterForm.Start = e.Value<DateTime>(DateTime.MinValue);
		await LoadJobs();
	}

	private async Task OnFilterValueEndChanged(ChangeEventArgs e) {
		FilterForm.End = e.Value<DateTime>(DateTime.MaxValue);
		await LoadJobs();
	}

	// private async Task CreateGoal(EditContext editContext) {
	// 	if (_userId.NullOrEmpty()) return;
	// 	GoalCreationData request = new(NewGoal.Name, _userId);

	// 	var url = NavManager.ToAbsoluteUri("api/goals/save").AbsoluteUri;

	// 	var response = await Http.PostAsJsonAsync(url, request);
	// }

	private async Task OnJobsBuilded(string userId) {
		if (userId != _userId) return;
		await LoadJobs();

		await InvokeAsync(StateHasChanged);
	}

	class JobsFilterForm {
		public DateTimeOffset Start { get; set; }
		public DateTimeOffset End { get; set; }

		public static JobsFilterForm Create() {
			var today = DateTimeOffset.Now;

			JobsFilterForm form = new() {
					Start = new DateTimeOffset(today.AddDays(-7).Date),
					End = new DateTimeOffset(today.Date.AddDays(1))
				};
			return form;
		}
	}
}
