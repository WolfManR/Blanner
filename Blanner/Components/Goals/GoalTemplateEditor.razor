@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalization Loc

@attribute [Authorize]
@implements IDialogContentComponent<GoalEditParameters>

<FluentDialogHeader>@Loc.GoalEditorHeader</FluentDialogHeader>

<FluentDialogBody>
	<EditForm FormName="GoalEditorEditForm" Model="EditForm" class="d-flex flex-column gap-2 mt-3">
		<DataAnnotationsValidator/>

		<div class="input-group mb-3">
			<label class="input-group-text">@Loc.NameInputLabel</label>
			<InputText class="form-control" @bind-Value="EditForm.Name" DisplayName="Name" />
		</div>

		<div class="mb-3">
			<label>
				@Loc.ContractorInputLabel
				<InputSelect class="form-select" @bind-Value="SelectedContractorId" DisplayName="Contractor">
					<option value="0">@Loc.OptionEmpty</option>
					@foreach (var item in Contractors) {
						<option value="@item.Id">@item.Name</option>
					}
				</InputSelect>
			</label>

			<FluentButton IconStart="@(new Icons.Regular.Size32.AddSquare())" @onclick="AddContractor"></FluentButton>
		</div>
		@if (EditForm.Contractors.Count > 0) {

			<div style="width:95%">

				<FluentHorizontalScroll Speed="600" Easing=ScrollEasing.EaseInOut>
					@foreach (var selectedContractor in EditForm.Contractors) {
						<FluentCard MinimalStyle="true" Class="p-2 d-flex flex-row flex-nowrap align-items-center justify-content-between">
							<div>@selectedContractor.Name</div>
							<FluentButton Class="ms-2" IconStart="@(new Icons.Regular.Size20.Dismiss())" OnClick="() => EditForm.Contractors.Remove(selectedContractor)"></FluentButton>
						</FluentCard>
					}
				</FluentHorizontalScroll>

			</div>
		}

		<InputTextArea class="form-control" @bind-Value="EditForm.Comment" style="height:40vh;" DisplayName="Comment" />
	</EditForm>
</FluentDialogBody>

<FluentDialogFooter>
	<FluentButton Appearance="Appearance.Accent" OnClick="() => SaveGoalChanges(true)" IconStart="@(new Icons.Regular.Size24.Save())">@Loc.BtnSaveAndClose</FluentButton>
	<FluentButton Appearance="Appearance.Outline" OnClick="() => SaveGoalChanges()" IconStart="@(new Icons.Regular.Size24.Save())">@Loc.BtnSave</FluentButton>
</FluentDialogFooter>

@code {
	private string _userId = "";
	private List<Contractor> Contractors { get; set; } = new();
	[CascadingParameter]
	public FluentDialog? Dialog { get; set; }

	[Parameter]
	public GoalEditParameters Content { get; set; } = default!;

	[SupplyParameterFromForm]
	public GoalTemplateEditForm EditForm { get; set; } = new();

	[SupplyParameterFromForm]
	public int? SelectedContractorId { get; set; }

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";

		var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
		Contractors = await Http.GetFromJsonAsync<List<Contractor>>(uri) ?? new();

		var url = NavManager.ToAbsoluteUri($"api/goals/templates/{Content.Id}").AbsoluteUri;

		var data = await Http.GetFromJsonAsync<GoalTemplateDetailsData>(url);
		EditForm.Set(data);
		if (EditForm.Contractors.Count == 1) SelectedContractorId = EditForm.Contractors.Select(x => x.Id).First();
	}

	private void AddContractor() {
		if (!SelectedContractorId.HasValue) return;
		if (Contractors.Find(x => x.Id == SelectedContractorId) is not { } selected) return;
		EditForm.Contractors.Add(selected);
	}

	private async Task SaveGoalChanges(bool close = false) {
		HashSet<int> contractorsIds = EditForm.Contractors.Select(x => x.Id).ToHashSet();
		if (SelectedContractorId.HasValue) contractorsIds.Add(SelectedContractorId.Value);
		int[] contractors = contractorsIds.Order().ToArray();

		
		GoalTemplateHeaderDataChanges request = new(_userId, EditForm.Id, EditForm.Name, EditForm.Comment, contractors);

		var url = NavManager.ToAbsoluteUri($"api/goals/templates/save/header").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);

		if(close && Dialog is not null)
			await Dialog.CloseAsync();
	}
}
