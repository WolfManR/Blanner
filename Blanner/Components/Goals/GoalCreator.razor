
@inject NavigationManager NavManager
@inject HttpClient Http
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalization Loc

<div class="d-flex align-items-center justify-content-between">
	<div class="btn-group">
		<FluentButton IconStart="@(new Icons.Regular.Size24.Save())" @onclick="Save">@Loc.BtnSave</FluentButton>
		<FluentButton IconStart="@(new Icons.Regular.Size24.Broom())" @onclick="Clear">@Loc.BtnClear</FluentButton>
	</div>
</div>

<EditForm FormName="AdminActiveGoalEditForm" Model="EditForm">
	<DataAnnotationsValidator />
	<FluentValidationSummary />

	<FluentStack Orientation="Orientation.Vertical">
		<div>
			<FluentTextField Name="Name" @bind-Value="EditForm.Name" Label="@Loc.NameInputLabel" Style="width: 40rem" Required />
		</div>
		
		<div class="mb-3">
			<label>
				@Loc.ContractorInputLabel
				<InputSelect class="form-select" @bind-Value="EditForm.Contractor" DisplayName="Contractor">
					<option value="0">@Loc.OptionEmpty</option>
					@foreach (var item in _contractors) {
						<option value="@item.Id">@item.Name</option>
					}
				</InputSelect>
			</label>

			<FluentButton IconStart="@(new Icons.Regular.Size32.AddSquare())" @onclick="AddContractor"></FluentButton>
		</div>
		@if (SelectedContractors.Count > 0) {

			<div style="width:95%">

				<FluentHorizontalScroll Speed="600" Easing=ScrollEasing.EaseInOut>
					@foreach (var selectedContractor in SelectedContractors) {
						<FluentCard MinimalStyle="true" Class="p-2 d-flex flex-row flex-nowrap align-items-center justify-content-between">
							<div>@selectedContractor.Name</div>
							<FluentButton Class="ms-2" IconStart="@(new Icons.Regular.Size20.Dismiss())" OnClick="() => SelectedContractors.Remove(selectedContractor)"></FluentButton>
						</FluentCard>
					}
				</FluentHorizontalScroll>

			</div>
		}
		
		<InputTextArea class="form-control" @bind-Value="EditForm.Comment" style="height:40vh;" DisplayName="Comment" />
	</FluentStack>
</EditForm>

@code {
	private List<Contractor> _contractors = [];
	private List<UserSelectListData> _users = [];
	private string _userId = "";

	private UserSettings? UserSettings { get; set; }

	[CascadingParameter]
	public ActiveGoalEditForm EditForm { get; set; } = new();

	public HashSet<Contractor> SelectedContractors { get; set; } = [];

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";


		var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
		_contractors = await Http.GetFromJsonAsync<List<Contractor>>(uri) ?? new();

		uri = NavManager.ToAbsoluteUri("api/users").AbsoluteUri;
		_users = await Http.GetFromJsonAsync<List<UserSelectListData>>(uri) ?? new();
	}

	private void AddContractor() {
		if(EditForm.Contractor is null) return;
		var selected = _contractors.Find(x => x.Id == EditForm.Contractor);
		if (selected is null) return;
		SelectedContractors.Add(selected);
	}

	private async Task Save() {
		if (EditForm?.Name is null) return;

		string uri = "api/goals/active/create";

		var url = NavManager.ToAbsoluteUri(uri).AbsoluteUri;

		List<GoalCreationData> data = [];
		if (SelectedContractors.Count > 0) data.AddRange(SelectedContractors.Select(x => new GoalCreationData(_userId, EditForm.Name, EditForm.Comment, x.Id)));
		else data.Add(new(_userId, EditForm.Name, EditForm.Comment, EditForm.Contractor));

		await Parallel.ForEachAsync(data, async (request, token) => {
			var response = await Http.PostAsJsonAsync(url, request);
		});
	}

	private void Clear() {
		EditForm.Init();
		SelectedContractors.Clear();
	}
}
