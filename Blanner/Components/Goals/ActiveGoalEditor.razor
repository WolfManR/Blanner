
@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject IDialogService DialogService

@attribute [Authorize]

<div class="d-flex align-items-center justify-content-between">
	<div class="btn-group">
		<button class="btn btn-primary" @onclick="SaveActiveGoalChanges"><i class="bi bi-floppy"></i></button>
	</div>

	<div class="form-check form-switch">
		<input class="form-check-input" type="checkbox" role="switch" id="timesSwitcher" @bind-value="_showTimes" />
		<label class="form-check-label" for="timesSwitcher">Times</label>
	</div>
</div>

<EditForm FormName="ActiveGoalEditForm" Model="GoalEditForm" class="d-flex flex-column gap-2 mt-3">
	<div class="input-group mb-3">
		<label class="input-group-text">Contractor</label>

		<InputSelect class="form-select" @bind-Value="GoalEditForm.Contractor" DisplayName="Contractor">
			<option value="0">Empty</option>
			@foreach (var item in Contractors) {
				<option value="@item.Id">@item.Name</option>
			}
		</InputSelect>
	</div>

	<div class="input-group mb-3">
		<label class="input-group-text">Name</label>
		<InputText class="form-control" @bind-Value="GoalEditForm.Name" DisplayName="Name" />
	</div>

	<InputTextArea class="form-control" @bind-Value="GoalEditForm.Comment" style="height:40vh;" DisplayName="Comment" />
</EditForm>

@if (_showTimes) {
	<div class="mt-2 mb-1">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Id</th>
					<th>From</th>
					<th>To</th>
					<th>Time</th>
					<th>
						<div>
							<button class="btn-lg" @onclick="AddTimeActiveGoal"><i class="bi bi-plus-square-fill"></i></button>
						</div>
					</th>
				</tr>
			</thead>

			<tbody>
				@foreach (var item in GoalEditForm.GoalTime) {
					<tr>
						<td>@item.Id</td>
						<td>@item.Start.ToString("t")</td>
						<td>@item.End.ToString("t")</td>
						<td>@item.Time.ToString(UserSettings.DetailedTimeFormatterValue())</td>
						<td>
							@if (item.Id != GoalEditForm.ActiveTimerId) {
								<div>
									<button class="btn btn-danger" @onclick="() => DeleteTime(item)"><i class="bi bi-trash3"></i></button>
									<button class="btn btn-info" @onclick="() => EditTimeActiveGoal(item)"><i class="bi bi-pencil-square"></i></button>
								</div>
							}
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

<TimeRangeEditDialog @ref="_dialogRef" DialogCompletion="DialogClosed" />

@code {

    private TimeRangeEditDialog? _dialogRef;
    private Func<TimeRange?, ValueTask>? _dialogCompletion;

    private string _userId = "";
    private bool _showTimes;

    [CascadingParameter]
    private ActiveGoalEditForm GoalEditForm { get; set; } = new();
    private ActiveGoalTimeEditForm TimerEditForm { get; set; } = ActiveGoalTimeEditForm.Create();

    private List<Contractor> Contractors { get; set; } = new();
    private UserSettings? UserSettings { get; set; }

    protected override async Task OnInitializedAsync() {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userId = UserManager.GetUserId(state.User) ?? "";

        var uri = NavManager.ToAbsoluteUri("api/contractors").AbsoluteUri;
        var response = await Http.GetFromJsonAsync<List<Contractor>>(uri);
        Contractors = response ?? new();
    }

    private async Task SaveActiveGoalChanges() {
        if (GoalEditForm.IsEmpty) return;
        var (goalId, name, contractorId, comment) = GoalEditForm;
        ActiveGoalHeaderChangesSaveData request = new(goalId, _userId, name, contractorId, comment);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/save/header").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private void ShowHideActiveGoalTimes() {
        _showTimes = !_showTimes;
    }

    private async Task AddTimeActiveGoal() {
        if (GoalEditForm.IsEmpty) return;
        TimerEditForm = ActiveGoalTimeEditForm.Create();
        await OpenDialog(AddTimeActiveGoalCompletion);
    }

    private async Task EditTimeActiveGoal(ActiveGoalTimeData item) {
        if (GoalEditForm.IsEmpty) return;
        TimerEditForm = ActiveGoalTimeEditForm.Create(item);
        await OpenDialog(EditTimeActiveGoalCompletion);
    }

    private async ValueTask OpenDialog(Func<TimeRange?, ValueTask> dialogCompletion) {
        if (_dialogRef is null) return;

        _dialogCompletion = dialogCompletion;
        await _dialogRef.OpenDialog(new() {
                Start = TimerEditForm.Start,
                End = TimerEditForm.End
            });
    }

    private async Task DialogClosed(TimeRange? range) {
        if (_dialogCompletion is not null) await _dialogCompletion.Invoke(range);
        _dialogCompletion = null;
    }

    private async ValueTask AddTimeActiveGoalCompletion(TimeRange? timeRange) {
        if (GoalEditForm.IsEmpty || timeRange is null) {
            TimerEditForm = ActiveGoalTimeEditForm.Create();
            return;
        }

        GoalTimeCreationData request = new(
            GoalEditForm.Id,
            _userId,
            timeRange.Start,
            timeRange.End,
            timeRange.End - timeRange.Start);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/time/add").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private async ValueTask EditTimeActiveGoalCompletion(TimeRange? timeRange) {
        if (GoalEditForm.IsEmpty || timeRange is null) {
            TimerEditForm = ActiveGoalTimeEditForm.Create();
            return;
        }

        GoalTimeEditData request = new(
            GoalEditForm.Id,
            TimerEditForm.Id,
            _userId,
            timeRange.Start,
            timeRange.End,
            timeRange.End - timeRange.Start);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/time/edit").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private async Task DeleteTime(ActiveGoalTimeData time) {
        GoalTimeDeleteData request = new(GoalEditForm.Id, time.Id, _userId);

        var url = NavManager.ToAbsoluteUri($"api/goals/active/time/delete").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }
}
