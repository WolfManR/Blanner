@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ILocalization Loc

@attribute [Authorize]

@implements IAsyncDisposable

<div>
	<div class="goals-table mt-2">
		
		<div class="goals-table-body">
			@foreach (var group in _goals.GroupBy(x => new Value<Contractor, int>(x.Contractor)).OrderBy(x => x.Key.ToString())) {
				Contractor? keyValue = group.Key;

				<ContextMenuTrigger MenuId="ActiveGoalContractorGroupContextMenu" Data="@group.Key">
					<div class="row goals-table-item item-header align-items-baseline">
						<FluentLabel Class="col-9 fw-bold">@(keyValue?.Name ?? Loc.ContractorNoneName)</FluentLabel>
						<div class="col-3 d-flex justify-content-end">
							<button class="btn btn-danger" @onclick="() => DeleteContractorGroup(group.Key)" disabled><i class="bi bi-trash3"></i></button>
						</div>
					</div>
				</ContextMenuTrigger>

				@if (group.Count() > 0) {
					@foreach (var item in group) {
						<ActiveGoalRow Goal="item">
							<RowTemplate>
								<ContextMenuTrigger MenuId="ActiveGoalsContextMenu" Data="@context">
									<div class="row goals-table-item item align-items-baseline" @onclick="() => SelectGoal(context)">
										<FluentLabel Class="col-2">@context.TotalElapsedTime.ToString(UserSettings.TimeFormatterValue())</FluentLabel>
										<FluentLabel Class="col-4">@context.Name</FluentLabel>
										<FluentLabel Class="col-3">@context.TimerTime.ToString(UserSettings.DetailedTimeFormatterValue())</FluentLabel>
										<div class="col-3 d-flex justify-content-end">
											<div class="btn-group">
												@* @if (context.GoalId is not null) {
													<button class="btn btn-outline-secondary" @onclick="() => OpenGoal(context.GoalId)" @onclick:stopPropagation="true"><i class="bi bi-link"></i></button>
												} *@
												@if (context.Tick) {
													<button class="btn btn-danger" @onclick="() => StopGoal(context)" @onclick:stopPropagation="true"><i class="bi bi-stop-circle"></i></button>
												}
												else {
													<button class="btn btn-success" @onclick="() => ActivateGoal(context)" @onclick:stopPropagation="true"><i class="bi bi-play-fill"></i></button>
												}
											</div>
										</div>
									</div>
								</ContextMenuTrigger>
							</RowTemplate>
						</ActiveGoalRow>
					}
				}
			}
		</div>
	</div>

	<ContextMenu Id="ActiveGoalsContextMenu">
		<Item OnClick="DeleteGoal"><i class="bi bi-trash3"></i> @Loc.BtnDelete</Item>
		<Item Id="menuitem-persist" OnClick="Persist" OnAppearing="ItemOnAppearingHandler"><i class="bi bi-database-add"></i> @Loc.BtnPersist</Item>
	</ContextMenu>
</div>

@code {
	private GoalsClient? GoalsClient { get; set; }
	private string _userId = "";
	private List<ActiveGoalVM> _goals = new();

	[Parameter]
	public EventCallback<int> OnSelected { get; set; }
	[Parameter]
	public EventCallback<int> OnOpenGoal { get; set; }

	[CascadingParameter]
	public UserSettings? UserSettings { get; set; }

	protected override async Task OnInitializedAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userId = UserManager.GetUserId(state.User) ?? "";

		await LoadGoals();

		GoalsClient = new(NavManager);

		// GoalsClient.OnGoalTemplateCreated += OnGoalCreated;
		// GoalsClient.OnGoalTemplateHeaderEdited += OnGoalHeaderEdited;
		// GoalsClient.OnGoalTemplateDeleted += OnGoalDeleted;

		GoalsClient.OnGoalActivated += OnGoalActivated;
		GoalsClient.OnGoalCreated += OnGoalCreated;
		GoalsClient.OnGoalHeaderEdited += OnGoalHeaderEdited;
		GoalsClient.OnGoalDeleted += OnGoalDeleted;

		GoalsClient.OnTimeEdited += OnTimerEdited;
		GoalsClient.OnTimeStopped += OnTimerStopped;

		GoalsClient.OnGoalTimeCreated += OnActiveGoalTimeCreated;
		GoalsClient.OnGoalTimeEdited += OnActiveGoalTimeEdited;
		GoalsClient.OnGoalTimeDeleted += OnActiveGoalTimeDeleted;

		GoalsClient.OnJobsBuilded += OnJobsBuilded;

		await GoalsClient.Start();
	}

	#region UI Handlers

	private void ItemOnAppearingHandler(ItemAppearingEventArgs e) {
		if (e.Data is not ActiveGoalVM item) return;
		switch (e.MenuItem.Id) {
			case "menuitem-persist":
				// e.IsEnabled = item.GoalId is null;
				break;
		}
	}

	private async Task LoadGoals() {
		var url = NavManager.GetUriWithQueryParameters(
			NavManager.ToAbsoluteUri("api/goals/active").AbsoluteUri,
			new Dictionary<string, object?> {
				{ "userId",  _userId }
						});

		var response = await Http.GetFromJsonAsync<List<ActiveGoalListData>>(url);
		if (response is null) {
			_goals.Clear();
			return;
		}
		_goals = response.Select(x => new ActiveGoalVM(x)).ToList();
	}

	private async Task SelectGoal(ActiveGoalVM item) {
		if (OnSelected.HasDelegate) await OnSelected.InvokeAsync(item.Id);
	}

	private async Task OpenGoal(int? goalId) {
		if (goalId.HasValue && OnOpenGoal.HasDelegate) await OnOpenGoal.InvokeAsync(goalId.Value);
	}

	private async Task Persist(ItemClickEventArgs e) {
		if (e.Data is not ActiveGoalVM item) return;
		GoalSaveAsTemplateData request = new(item.Id, _userId);

		var url = NavManager.ToAbsoluteUri("api/goals/active/persist").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private Task DeleteContractorGroup(Value<Contractor, int> groupKey) {
		// if(_goalsGroups.Remove(groupKey, out var list)) {
		// 	_goals.RemoveAll(x => list.Contains(x));
		// }
		return Task.CompletedTask;
	}

	private async Task ActivateGoal(ActiveGoalVM item) {
		GoalActivationData request = new(_userId, item.Id, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/goals/active/start").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task StopGoal(ActiveGoalVM item) {
		GoalDeactivationData request = new(_userId, item.Id, DateTimeOffset.Now);

		var url = NavManager.ToAbsoluteUri("api/goals/active/stop").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	private async Task DeleteGoal(ItemClickEventArgs e) {
		if (e.Data is not ActiveGoalVM item) return;
		GoalDeleteData request = new(_userId, item.Id);

		var url = NavManager.ToAbsoluteUri("api/goals/active/delete").AbsoluteUri;

		var response = await Http.PostAsJsonAsync(url, request);
	}

	#endregion

	#region Subscriptions

	// private async Task OnGoalCreated(int goalId, string userId, GoalData data) {
	// 	ActiveGoalVM? goal = _goals.Find(x => x.Id == data.ActiveGoalId);
	// 	if (goal is null) return;

	// 	goal.GoalId = data.Id;

	// 	await InvokeAsync(StateHasChanged);
	// }

	// private async Task OnGoalHeaderEdited(int goalId, string userId, GoalTemplateHeaderData data) {
	// 	ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
	// 	if (goal is null) return;

	// 	var previousContractor = goal.Contractor;
	// 	var currentContractor = data.Contractor;

	// 	goal.Set(data);

	// 	await InvokeAsync(StateHasChanged);
	// }

	// private async Task OnGoalDeleted(int goalId, string userId) {
	// 	ActiveGoalVM? goal = _goals.Find(x => x.GoalId == goalId);
	// 	if (goal is null) return;

	// 	_goals.Remove(goal);

	// 	await InvokeAsync(StateHasChanged);
	// }


	private async Task OnGoalActivated(string userId, int goalId, ActiveGoalTimeData? timerData) {
		if (userId != _userId) return;

		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) {
			var url = NavManager.ToAbsoluteUri($"api/goals/active/list/{goalId}").AbsoluteUri;
			var response = await Http.GetFromJsonAsync<ActiveGoalListData>(url);
			if(response is not null) {
				goal = new(response);
				_goals.Insert(0, goal);
			}
		}
		else if(timerData is not null) {
			var url = NavManager.ToAbsoluteUri($"api/goals/active/list/{goalId}").AbsoluteUri;
			var response = await Http.GetFromJsonAsync<ActiveGoalListData>(url);
			goal.TotalElapsedTime = response!.TotalElapsedTime;
			goal.ActiveTimerId = timerData.Id;
			goal.ActivationTime = timerData.Start;
			goal.Tick = true;
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalCreated(string userId, int goalId, ActiveGoalListData data) {
		if (data.User?.Id != _userId) return;

		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) {
			goal = new(data);
			_goals.Insert(0, goal);
		}
		else {
			goal.SetActiveData(data);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalHeaderEdited(string userId, int goalId, ActiveGoalHeaderData data) {
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		var previousContractor = goal.Contractor;
		var currentContractor = data.Contractor;

		goal.Set(data);

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnGoalDeleted(string userId, int goalId) {
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		_goals.Remove(goal);

		await InvokeAsync(StateHasChanged);
	}


	private async Task OnTimerEdited(string userId, int goalId, int timeId, TimeEditData data) {
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = data.Time;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnTimerStopped(string userId, int goalId, TimeSpan timeTotal) {
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = timeTotal;
		goal.ActiveTimerId = 0;
		goal.TimerTime = TimeSpan.Zero;
		goal.Tick = false;

		await InvokeAsync(StateHasChanged);
	}


	private async Task OnActiveGoalTimeCreated(string userId, int goalId, ActiveGoalTimeData _, TimeSpan goalTotalTime) {
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimeEdited(string userId, int goalId, ActiveGoalTimeData _, TimeSpan goalTotalTime) {
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}

	private async Task OnActiveGoalTimeDeleted(string userId, int goalId, int timeId, TimeSpan goalTotalTime) {
		ActiveGoalVM? goal = _goals.Find(x => x.Id == goalId);
		if (goal is null) return;

		goal.TotalElapsedTime = goalTotalTime;

		await InvokeAsync(StateHasChanged);
	}


	private async Task OnJobsBuilded(string userId) {
		if (_userId != userId) return;
		await LoadGoals();

		await InvokeAsync(StateHasChanged);
	}

	#endregion

	public async ValueTask DisposeAsync() {
		if (GoalsClient is not null) await GoalsClient.DisposeAsync();
	}
}
