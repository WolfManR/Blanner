@page "/goals-dashboard"
@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ILocalization Loc

@implements IAsyncDisposable

<PageTitle>@Loc.GoalsPageTitle</PageTitle>
<CascadingValue Value="UserSettings">

<FluentSplitter Orientation="Orientation.Horizontal" Class="h-100" BarSize="6" Panel1MinSize="30%" Panel2MinSize="20%" Collapsed="@(_sidePanelMode is SidePanelMode.None)">

	<Panel1>
        <div class="m-2">
			<FluentToolbar style="width: 100%;">
				<FluentButton Appearance="Appearance.Outline" OnClick="() => Complete()">@Loc.BtnCompleteJob</FluentButton>
				<FluentButton Class="me-2" Appearance="Appearance.Accent" OnClick="() => BuildJob()">@Loc.BtnBuildJob</FluentButton>

                <FluentButton slot="end" Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size28.TasksApp())" OnClick="() => OpenGoals()"></FluentButton>
				<FluentButton slot="end" Appearance="Appearance.Accent" OnClick="() => OpenActiveGoalCreator()">@Loc.BtnCreate</FluentButton>
			</FluentToolbar>

			<Goals OnSelected="OpenDetails" OnOpenGoal="OpenGoal" />
		</div>
	</Panel1>

    <Panel2>
        <div class="m-2">
            <FluentCard>
                <div class="mb-1 align-content-end">
                    <FluentButton IconStart="@(new Icons.Regular.Size24.Dismiss())" OnClick="() => {_sidePanelMode = SidePanelMode.None;}"></FluentButton>
                </div>

		    	<CascadingValue Value="EditForm">
		    		@if (_sidePanelMode is SidePanelMode.Create) {
		    			<GoalCreator/>
		    		}

		    		@if (_sidePanelMode is SidePanelMode.Edit) {
		    			<GoalEditor />
		    		}
		    	</CascadingValue>

                @if (_sidePanelMode is SidePanelMode.GoalsList) {
                    <GoalsTemplates DataHeight="76dvh"/>
                }

            </FluentCard>
        </div>
    </Panel2>

    </FluentSplitter>
</CascadingValue>

<GoalTemplateContextMenu OnEdit="OpenGoal" />

@code {
    private GoalsClient? GoalsClient { get; set; }
    private string _userId = "";

    private SidePanelMode _sidePanelMode = SidePanelMode.GoalsList;
    private ActiveGoalEditForm EditForm { get; set; } = new();
    public UserSettings? UserSettings { get; set; }

    protected override async Task OnInitializedAsync() {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userId = UserManager.GetUserId(state.User) ?? "";

        GoalsClient = new(NavManager);

        // GoalsClient.OnGoalTemplateHeaderEdited += OnGoalTemplateHeaderEdited;
        // GoalsClient.OnGoalTemplateDeleted += OnGoalTemplateDeleted;

        GoalsClient.OnGoalActivated += OnGoalActivated;
        GoalsClient.OnGoalHeaderEdited += OnGoalHeaderEdited;
        GoalsClient.OnGoalDeleted += OnGoalDeleted;

        GoalsClient.OnTimerStopped += OnTimerStopped;

        GoalsClient.OnGoalTimerCreated += OnGoalTimerCreated;
        GoalsClient.OnGoalTimerEdited += OnGoalTimerEdited;
        GoalsClient.OnGoalTimerDeleted += OnGoalTimerDeleted;

        GoalsClient.OnJobsBuilded += OnJobsBuilded;

        await GoalsClient.Start();
    }

    #region UI Handlers

    private async Task OpenDetails(int goalId) {
        var url = NavManager.ToAbsoluteUri($"api/goals/active/details/{goalId}").AbsoluteUri;

        var response = await Http.GetFromJsonAsync<ActiveGoalDetailsData>(url);
        EditForm.Init(response);
        _sidePanelMode = SidePanelMode.Edit;
        StateHasChanged();
    }

    private void OpenActiveGoalCreator() {
        EditForm.Init();
        _sidePanelMode = SidePanelMode.Create;
        StateHasChanged();
    }

    private void OpenGoals() {
        EditForm.Init();
        _sidePanelMode = SidePanelMode.GoalsList;
        StateHasChanged();
    }

    private async Task OpenGoal(int id) {
        DialogParameters parameters = new() {
                Title = "Goal",
                Width = "40vw",
                Modal = true,
                PreventScroll = true,
                ShowDismiss = true
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<GoalTemplateEditor>(new GoalEditParameters(id), parameters);
        await dialog.Result;
    }


    private async Task Complete() {
        CompleteJobData request = new(_userId, DateTimeOffset.Now);

        var url = NavManager.ToAbsoluteUri("api/goals/active/complete").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private async Task BuildJob() {
        BuildJobData request = new(_userId, DateTimeOffset.Now);

        var url = NavManager.ToAbsoluteUri("api/jobs/build").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    #endregion

    #region Subscriptions

    // private async Task OnGoalTemplateHeaderEdited(string userId, int goalId, GoalTemplateHeaderData data) {
    //     bool changed = false;
    //     if (EditForm.Id == goalId) {
    //         EditForm.Set(data);
    //         changed = true;
    //         return;
    //     }

    //     if (changed) await InvokeAsync(StateHasChanged);
    // }

    // private async Task OnGoalTemplateDeleted(string userId, int goalId) {
    //     if (EditForm.Id == goalId) {
    //         EditForm.Init();
    //     }

    //     await InvokeAsync(StateHasChanged);
    // }


    private async Task OnGoalActivated(string userId, int goalId, ActiveGoalTimeData? timerData) {
        bool changed = false;

        if (EditForm.Id == goalId) {
            EditForm.ActiveTimerId = timerData?.Id;
            if (timerData is not null && EditForm.GoalTime.All(X => X.Id != timerData.Id)) {
                EditForm.GoalTime.Add(timerData);
                EditForm.GoalTime.Sort();
            }
            changed = true;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalHeaderEdited(string userId, int goalId, ActiveGoalHeaderData data) {
        bool changed = false;
        if (EditForm.Id == goalId) {
            EditForm.Set(data);
            changed = true;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalDeleted(string userId, int goalId) {
        if (EditForm.Id == goalId) {
            EditForm.Init();
        }

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnTimerStopped(string userId, int goalId, TimeSpan _) {
        if (EditForm.Id != goalId) return;

        EditForm.ActiveTimerId = null;

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnGoalTimerCreated(string userId, int goalId, ActiveGoalTimeData timerData, TimeSpan _) {
        if (EditForm.Id != goalId) return;

        ActiveGoalTimeData? goalTime = EditForm.GoalTime.Find(x => x.Id == timerData.Id);
        if (goalTime is not null) return;
        EditForm.GoalTime.Add(timerData);

        EditForm.GoalTime.Sort();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalTimerEdited(string userId, int goalId, ActiveGoalTimeData timerData, TimeSpan _) {
        if (EditForm.Id != goalId) return;

        ActiveGoalTimeData? goalTime = EditForm.GoalTime.Find(x => x.Id == timerData.Id);
        if (goalTime is null) return;

        goalTime.Start = timerData.Start;
        goalTime.End = timerData.End;

        EditForm.GoalTime.Sort();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalTimerDeleted(string userId, int goalId, int timerId, TimeSpan goalTotalTime) {
        if (EditForm.Id != goalId) return;

        ActiveGoalTimeData? goalTime = EditForm.GoalTime.Find(x => x.Id == timerId);
        if (goalTime is null) return;

        EditForm.GoalTime.Remove(goalTime);

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnJobsBuilded(string userId) {
        if (EditForm.IsEmpty) return;

        EditForm.Init();

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    public async ValueTask DisposeAsync() {
        if(GoalsClient is not null) await GoalsClient.DisposeAsync();
    }

    enum SidePanelMode {
        None,
        GoalsList,
        Create,
        Edit,
    }
}