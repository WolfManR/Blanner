@page "/goals-dashboard"
@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GoalsClient GoalsClient
@inject IDialogService DialogService
@inject ILocalization Loc

<PageTitle>@Loc.GoalsPageTitle</PageTitle>
<CascadingValue Value="UserSettings">

<FluentSplitter Orientation="Orientation.Horizontal" BarSize="6" Panel1MinSize="30%" Panel2MinSize="20%" Collapsed="@(_sidePanelMode is SidePanelMode.None)">

    <Panel1>
        <div>
            <FluentToolbar>
                <FluentButton Appearance="Appearance.Outline" OnClick="() => OpenGoals()">@Loc.BtnGoals</FluentButton>
                <FluentButton Appearance="Appearance.Outline" OnClick="() => Complete()">@Loc.BtnCompleteJob</FluentButton>
                <FluentButton Appearance="Appearance.Accent" OnClick="() => BuildJob()">@Loc.BtnBuildJob</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" OnClick="() => OpenActiveGoalCreator()">@Loc.BtnCreate</FluentButton>
            </FluentToolbar>

            <ActiveGoals OnSelected="OpenDetails" OnOpenGoal="OpenGoal" />
        </div>
    </Panel1>

    <Panel2>
        <FluentCard>
			<CascadingValue Value="EditForm">
				@if (_sidePanelMode is SidePanelMode.Create) {
					<ActiveGoalCreator />
				}

				@if (_sidePanelMode is SidePanelMode.Edit) {
					<ActiveGoalEditor />
				}
			</CascadingValue>

            @if (_sidePanelMode is SidePanelMode.GoalsList) {
                <Goals OnEdit="OpenGoal"/>
            }

        </FluentCard>
    </Panel2>

    </FluentSplitter>
</CascadingValue>

@code {
    private string _userId = "";

    private SidePanelMode _sidePanelMode = SidePanelMode.GoalsList;
    private ActiveGoalEditForm EditForm { get; set; } = new();
    public UserSettings? UserSettings { get; set; }

    protected override async Task OnInitializedAsync() {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userId = UserManager.GetUserId(state.User) ?? "";

        GoalsClient.OnGoalHeaderEdited += OnGoalHeaderEdited;
        GoalsClient.OnGoalDeleted += OnGoalDeleted;
        
        GoalsClient.OnGoalActivated += OnGoalActivated;
        GoalsClient.OnActiveGoalHeaderEdited += OnActiveGoalHeaderEdited;
        GoalsClient.OnActiveGoalDeleted += OnActiveGoalDeleted;
        
        GoalsClient.OnTimerStopped += OnTimerStopped;
        
        GoalsClient.OnActiveGoalTimerCreated += OnActiveGoalTimerCreated;
        GoalsClient.OnActiveGoalTimerEdited += OnActiveGoalTimerEdited;
        GoalsClient.OnActiveGoalTimerDeleted += OnActiveGoalTimerDeleted;
        
        GoalsClient.OnJobsBuilded += OnJobsBuilded;

        await GoalsClient.Start();
    }

    #region UI Handlers

    private async Task OpenDetails(int goalId) {
        var url = NavManager.ToAbsoluteUri($"api/goals/active/{goalId}").AbsoluteUri;

        var response = await Http.GetFromJsonAsync<ActiveGoalDetailsData>(url);
        EditForm.Init(response);
        _sidePanelMode = SidePanelMode.Edit;
        StateHasChanged();
    }

    private void OpenActiveGoalCreator() {
        EditForm.Init();
        _sidePanelMode = SidePanelMode.Create;
        StateHasChanged();
    }

    private void OpenGoals() {
        EditForm.Init();
        _sidePanelMode = SidePanelMode.GoalsList;
        StateHasChanged();
    }
    
    private async Task OpenGoal(int id) {
        DialogParameters parameters = new() {
                Title = "Goal",
                Width = "40vw",
                Modal = true,
                PreventScroll = true,
                ShowDismiss = true
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<GoalEditor>(new GoalEditParameters(id), parameters);
        await dialog.Result;
    }


    private async Task Complete() {
        CompleteJobData request = new(_userId, DateTimeOffset.Now);

        var url = NavManager.ToAbsoluteUri("api/goals/active/complete").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    private async Task BuildJob() {
        BuildJobData request = new(_userId, DateTimeOffset.Now);

        var url = NavManager.ToAbsoluteUri("api/jobs/build").AbsoluteUri;

        var response = await Http.PostAsJsonAsync(url, request);
    }

    #endregion

    #region Subscriptions

    private async Task OnGoalHeaderEdited(int goalId, string userId, GoalHeaderData data) {
        bool changed = false;
        if (EditForm.Id == goalId) {
            EditForm.Set(data);
            changed = true;
            return;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnGoalDeleted(int goalId, string userId) {
        if (EditForm.GoalId == goalId) {
            EditForm.Init();
        }

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnGoalActivated(int goalId, int activeGoalId, string userId, ActiveGoalData data) {
        bool changed = false;

        if (EditForm.Id != goalId) {
            EditForm.ActiveTimerId = data.ActiveTimerId;
            changed = true;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalHeaderEdited(int goalId, string userId, ActiveGoalHeaderData data) {
        bool changed = false;
        if (EditForm.Id == goalId) {
            EditForm.Set(data);
            changed = true;
            return;
        }

        if (changed) await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalDeleted(int goalId, string userId) {
        if (EditForm.GoalId == goalId) {
            EditForm.Init();
        }

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnTimerStopped(int goalId, string userId, TimeSpan _) {
        if (EditForm.Id != goalId) return;

        EditForm.ActiveTimerId = null;

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnActiveGoalTimerCreated(int goalId, string userId, ActiveGoalTimeData timerData, TimeSpan _) {
        if (EditForm.Id != goalId) return;

        ActiveGoalTimeData? goalTime = EditForm.GoalTime.Find(x => x.Id == timerData.Id);
        if (goalTime is not null) return;
        EditForm.GoalTime.Add(timerData);

        EditForm.GoalTime.Sort();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalTimerEdited(int goalId, string userId, ActiveGoalTimeData timerData, TimeSpan _) {
        if (EditForm.Id != goalId) return;

        ActiveGoalTimeData? goalTime = EditForm.GoalTime.Find(x => x.Id == timerData.Id);
        if (goalTime is null) return;

        goalTime.Start = timerData.Start;
        goalTime.End = timerData.End;
        goalTime.Time = timerData.End - timerData.Start;

        EditForm.GoalTime.Sort();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveGoalTimerDeleted(int goalId, int timerId, string userId, TimeSpan goalTotalTime) {
        if (EditForm.Id != goalId) return;

        ActiveGoalTimeData? goalTime = EditForm.GoalTime.Find(x => x.Id == timerId);
        if (goalTime is null) return;

        EditForm.GoalTime.Remove(goalTime);

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnJobsBuilded(string userId) {
        if (EditForm.IsEmpty) return;

        EditForm.Init();

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    enum SidePanelMode {
        None,
        GoalsList,
        Create,
        Edit,
    }
}